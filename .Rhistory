# count blinks for each pt for each block
summarize(blink_count == n())
blinks_pupil_ts <- group_by(blinks_pupil_ts, id, blink_type) %>%
# count blinks for each pt for each block
summarize(blink_count == n())
blinks_pupil_ts <- group_by(blinks_pupil_ts, id, blink_type) %>%
# count blinks for each pt for each block
summarize(blink_count = n())
blinks_pupil_count <- group_by(blinks_pupil_ts, id, blink_type) %>%
# count blinks for each pt for each block
summarize(blink_count = n())
# add timestamps to pupil_comparison
blinks_pupil_ts <- left_join(pupil_comparison, blinks_timestamps, join_by(id == id, participant == participant, recording_id == recording_id)) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
start_timestamp_ns >= pprep_start & end_timestamp_ns <= pprep_end ~ "pprep",
start_timestamp_ns >= pspeech_start & end_timestamp_ns <= pspeech_end ~ "pspeech",
start_timestamp_ns >= cprep_start & end_timestamp_ns <= cprep_end ~ "cprep",
start_timestamp_ns >= cspeech_start & end_timestamp_ns <= cspeech_end ~ "cspeech",
.default = NA
)) %>%
# remove blinks outside of task sections
filter(!is.na(blink_type)) %>%
# convert UTC to relative timestamp in s
mutate(start_timestamp_s = (start_timestamp_ns - recording_begin)/(10^9), end_timestamp_s = (end_timestamp_ns - recording_begin)/(10^9)) %>%
# select relevant columns
select(id, blink_id, start_timestamp_s, end_timestamp_s, duration_ms, blink_type)
blinks_pupil_count <- group_by(blinks_pupil_ts, id, blink_type) %>%
# count blinks for each pt for each block
summarize(blink_count = n())
# group pupil blinks by id and blink type
blinks_pupil_count <- group_by(blinks_pupil_ts, id, blink_type) %>%
# count blinks for each pt for each block
summarize(blink_count_pupil = n())
# group manual blinks by id and blink type
blinks_manual_count <- group_by(blinks_manual_ts, id, blink_type) %>%
# count blinks for each pt for each block
summarize(blink_count_manual = n())
View(blinks_pupil_count)
View(blinks_manual_count)
# combine summary tables
blink_comparison <- full_join(blinks_pupil_count, blinks_manual_count, join_by(id, blink_type))
View(blink_comparison)
# adapted Joscelin's code from step_0_merging_pupil_files
# list blink files
file_paths_pupil <- list.files("pupil_data", pattern = "blinks.csv", full.names = TRUE, recursive = TRUE)
# create empty df to hold blinks
pupil_comparison <- tibble()
# loop through files and process
for (file_path in file_paths_pupil) {
# add ID and pt columns from folder names
file_name_parts <- unlist(strsplit(file_path, split = "_"))
id <- file_name_parts[2]
participant <- file_name_parts[3]
# Check if the file exists before attempting to read
if (file.exists(file_path)) {
# read the blinks.csv file
data <- read_csv(file_path, col_types = cols())
# Add the ID and pt columns
data$id <- sub("data/", "", id) # remove everything before the /
data$participant <- sub("_.*", "", participant)  # Remove everything after the underscore
# Merge this file's data into the main dataframe
pupil_comparison <- bind_rows(pupil_comparison, data)
}
}
# clean names
pupil_comparison <- janitor::clean_names(pupil_comparison)
# repeat above steps to generate TSST timestamp df
# list event files
file_paths_events <- list.files("pupil_data", pattern = "events.csv", full.names = TRUE, recursive = TRUE)
# create empty df to hold blinks
pupil_timestamps <- tibble()
# loop through files and process
for (file_path in file_paths_events) {
# add ID and pt columns from folder names
file_name_parts <- unlist(strsplit(file_path, split = "_"))
id <- file_name_parts[2]
participant <- file_name_parts[3]
# check if file exists before attempting to read
if (file.exists(file_path)) {
# read the events.csv file
data <- read_csv(file_path, col_types = cols())
# add the ID and pt columns
data$id <- sub("data/", "", id) # remove everything before the /
data$participant <- participant
# merge into main df
pupil_timestamps <- bind_rows(pupil_timestamps, data)
}
}
# remove event type columns
blinks_timestamps <- select(pupil_timestamps, 1:3, 5:6) %>%
# pivot the timestamps wider, one row per pt
pivot_wider(names_from = name, values_from = "timestamp [ns]") %>%
# clean names
janitor::clean_names()
# add timestamps to pupil_comparison
blinks_pupil_ts <- left_join(pupil_comparison, blinks_timestamps, join_by(id == id, participant == participant, recording_id == recording_id)) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
start_timestamp_ns >= pprep_start & end_timestamp_ns <= pprep_end ~ "pprep",
start_timestamp_ns >= pspeech_start & end_timestamp_ns <= pspeech_end ~ "pspeech",
start_timestamp_ns >= cprep_start & end_timestamp_ns <= cprep_end ~ "cprep",
start_timestamp_ns >= cspeech_start & end_timestamp_ns <= cspeech_end ~ "cspeech",
.default = NA
)) %>%
# remove blinks outside of task sections
filter(!is.na(blink_type)) %>%
# convert UTC to relative timestamp in s
mutate(start_timestamp_s = (start_timestamp_ns - recording_begin)/(10^9), end_timestamp_s = (end_timestamp_ns - recording_begin)/(10^9)) %>%
# select relevant columns
select(id, blink_id, start_timestamp_s, end_timestamp_s, duration_ms, blink_type)
# list R01 blink files
file_paths_manual <- list.files("manual_data", pattern = "110*", full.names = TRUE, recursive = TRUE)
# create empty df to hold blinks
manual_comparison <- tibble()
# loop through files and process
for (file_path in file_paths_manual) {
# add ID and pt columns from folder names
file_name_parts <- unlist(strsplit(file_path, split = "_"))
id <- file_name_parts[2]
participant <- file_name_parts[3]
# Check if the file exists before attempting to read
if (file.exists(file_path)) {
# read the blinks.csv file
data <- read_csv(file_path, col_types = cols(), skip = 1)
# Add the ID and pt columns
data$id <- sub("data/", "", id) # remove everything before the /
data$participant <- participant
# Merge this file's data into the main dataframe
manual_comparison <- bind_rows(manual_comparison, data)
}
}
# clean names
manual_comparison <- janitor::clean_names(manual_comparison)
# filter timestamps out of manual_comparison
blinks_manual_ts <- filter(manual_comparison, is.na(timestamps)) %>%
# add blink index column
mutate(blink_id = row_number()) %>%
# select relevant columns
select(id, blink_id, begin_time_ss_msec, end_time_ss_msec, duration_msec) %>%
# rename columns for consistency with pupil blinks
rename(start_timestamp_s = begin_time_ss_msec, end_timestamp_s = end_time_ss_msec, duration_ms = duration_msec) %>%
# add pupil timestamps
left_join(blinks_timestamps, join_by(id == id)) %>%
# convert UTC timestamps to relative timestamps in s
mutate(
pprep_start = (pprep_start - recording_begin)/(10^9),
pprep_end = (pprep_end - recording_begin)/(10^9),
pspeech_start = (pspeech_start - recording_begin)/(10^9),
pspeech_end = (pspeech_end - recording_begin)/(10^9),
cprep_start = (cprep_start - recording_begin)/(10^9),
cprep_end = (cprep_end - recording_begin)/(10^9),
cspeech_start = (cspeech_start - recording_begin)/(10^9),
cspeech_end = (cspeech_end - recording_begin)/(10^9)
) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
start_timestamp_s >= pprep_start & end_timestamp_s <= pprep_end ~ "pprep",
start_timestamp_s >= pspeech_start & end_timestamp_s <= pspeech_end ~ "pspeech",
start_timestamp_s >= cprep_start & end_timestamp_s <= cprep_end ~ "cprep",
start_timestamp_s >= cspeech_start & end_timestamp_s <= cspeech_end ~ "cspeech",
.default = NA
)) %>%
# remove blinks outside of task sections
filter(!is.na(blink_type)) %>%
# select relevant columns
select(1:5, 19)
# group pupil blinks by id and blink type
blinks_pupil_count <- group_by(blinks_pupil_ts, id, blink_type) %>%
# count blinks for each pt for each block
summarize(blink_count_pupil = n())
# group manual blinks by id and blink type
blinks_manual_count <- group_by(blinks_manual_ts, id, blink_type) %>%
# count blinks for each pt for each block
summarize(blink_count_manual = n())
# combine summary tables
blink_comparison <- full_join(blinks_pupil_count, blinks_manual_count, join_by(id, blink_type))
# combine summary tables
blink_comparison <- full_join(blinks_pupil_count, blinks_manual_count, join_by(id, blink_type)) %>%
# calculate difference
mutate(blink_difference_n = abs(blinks_pupil_count - blinks_manual_count),
blink_difference_perc = (blinks_pupil_count - blinks_manual_count)/blinks_pupil_count)
# combine summary tables
blink_comparison <- full_join(blinks_pupil_count, blinks_manual_count, join_by(id, blink_type)) %>%
# calculate difference
mutate(blink_difference_n = (blinks_pupil_count - blinks_manual_count),
blink_difference_perc = (blinks_pupil_count - blinks_manual_count)/blinks_pupil_count)
# combine summary tables
blink_comparison <- full_join(blinks_pupil_count, blinks_manual_count, join_by(id, blink_type)) %>%
# calculate difference
ungroup() %>%
mutate(blink_difference_n = (blinks_pupil_count - blinks_manual_count),
blink_difference_perc = (blinks_pupil_count - blinks_manual_count)/blinks_pupil_count)
# combine summary tables
blink_comparison <- full_join(blinks_pupil_count, blinks_manual_count, join_by(id, blink_type)) %>%
# calculate difference
ungroup() %>%
mutate(blink_difference_n = as.numeric(blinks_pupil_count) - as.numeric(blinks_manual_count),
blink_difference_perc = (blinks_pupil_count - blinks_manual_count)/blinks_pupil_count)
# combine summary tables
blink_comparison <- full_join(blinks_pupil_count, blinks_manual_count, join_by(id, blink_type)) %>%
# calculate difference
ungroup() %>%
mutate(blink_difference_n = as.numeric(blinks_pupil_count)-as.numeric(blinks_manual_count),
blink_difference_perc = (blinks_pupil_count - blinks_manual_count)/blinks_pupil_count)
# combine summary tables
blink_comparison <- full_join(blinks_pupil_count, blinks_manual_count, join_by(id, blink_type)) %>%
# calculate difference
ungroup() %>%
ungroup() %>%
mutate(blink_difference_n = as.numeric(blinks_pupil_count)-as.numeric(blinks_manual_count),
blink_difference_perc = (blinks_pupil_count - blinks_manual_count)/blinks_pupil_count)
# combine summary tables
blink_comparison <- full_join(blinks_pupil_count, blinks_manual_count, join_by(id, blink_type)) %>%
# calculate difference
unlist() %>%
mutate(blink_difference_n = as.numeric(blinks_pupil_count)-as.numeric(blinks_manual_count),
blink_difference_perc = (blinks_pupil_count - blinks_manual_count)/blinks_pupil_count)
# combine summary tables
blink_comparison <- full_join(blinks_pupil_count, blinks_manual_count, join_by(id, blink_type)) %>%
# calculate difference
mutate(blink_difference_n = unlist(blinks_pupil_count)-unlist(blinks_manual_count),
blink_difference_perc = (blinks_pupil_count - blinks_manual_count)/blinks_pupil_count)
# combine summary tables
blink_comparison <- full_join(blinks_pupil_count, blinks_manual_count, join_by(id, blink_type)) %>%
# calculate difference
mutate(#blink_difference_n = blinks_pupil_count - blinks_manual_count,
blink_difference_perc = (blinks_pupil_count - blinks_manual_count)/blinks_pupil_count)
# combine summary tables
blink_comparison <- full_join(blinks_pupil_count, blinks_manual_count, join_by(id, blink_type)) %>%
# write to csv
write_csv("blink_comparison.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tibble)
View(pupil_comparison)
# adapted Joscelin's code from step_0_merging_pupil_files
# list blink files
file_paths_pupil <- list.files("pupil_data", pattern = "blinks.csv", full.names = TRUE, recursive = TRUE)
# create empty df to hold blinks
pupil_comparison <- tibble()
# loop through files and process
for (file_path in file_paths_pupil) {
# add ID and pt columns from folder names
file_name_parts <- unlist(strsplit(file_path, split = "_"))
id <- file_name_parts[2]
participant <- file_name_parts[3]
# Check if the file exists before attempting to read
if (file.exists(file_path)) {
# read the blinks.csv file
data <- read_csv(file_path, col_types = cols())
# Add the ID and pt columns
data$id <- sub("data/", "", id) # remove everything before the /
data$participant <- sub("_.*", "", participant)  # Remove everything after the underscore
# Merge this file's data into the main dataframe
pupil_comparison <- bind_rows(pupil_comparison, data)
}
}
# clean names
pupil_comparison <- janitor::clean_names(pupil_comparison)
# repeat above steps to generate TSST timestamp df
# list event files
file_paths_events <- list.files("pupil_data", pattern = "events.csv", full.names = TRUE, recursive = TRUE)
# create empty df to hold blinks
pupil_timestamps <- tibble()
# loop through files and process
for (file_path in file_paths_events) {
# add ID and pt columns from folder names
file_name_parts <- unlist(strsplit(file_path, split = "_"))
id <- file_name_parts[2]
participant <- file_name_parts[3]
# check if file exists before attempting to read
if (file.exists(file_path)) {
# read the events.csv file
data <- read_csv(file_path, col_types = cols())
# add the ID and pt columns
data$id <- sub("data/", "", id) # remove everything before the /
data$participant <- participant
# merge into main df
pupil_timestamps <- bind_rows(pupil_timestamps, data)
}
}
# remove event type columns
pupil_timestamps <- select(pupil_timestamps, 1:3, 5:6) %>%
# pivot the timestamps wider, one row per pt
pivot_wider(names_from = name, values_from = "timestamp [ns]") %>%
# clean names
janitor::clean_names()
View(pupil_comparison)
# add timestamps to pupil_comparison
pupil_comparison_ts <- left_join(pupil_comparison, pupil_timestamps, join_by(id == id, participant == participant, recording_id == recording_id)) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
start_timestamp_ns >= pprep_start & end_timestamp_ns <= pprep_end ~ "pprep",
start_timestamp_ns >= pspeech_start & end_timestamp_ns <= pspeech_end ~ "pspeech",
start_timestamp_ns >= cprep_start & end_timestamp_ns <= cprep_end ~ "cprep",
start_timestamp_ns >= cspeech_start & end_timestamp_ns <= cspeech_end ~ "cspeech",
.default = NA
)) %>%
# remove blinks outside of task sections
filter(!is.na(blink_type)) %>%
# convert UTC to relative timestamp in s
mutate(start_timestamp_s = (start_timestamp_ns - recording_begin)/(10^9), end_timestamp_s = (end_timestamp_ns - recording_begin)/(10^9)) %>%
# select relevant columns
select(id, blink_id, start_timestamp_s, end_timestamp_s, duration_ms, blink_type)
View(pupil_comparison_ts)
# list R01 blink files
file_paths_manual <- list.files("manual_data", pattern = "110*", full.names = TRUE, recursive = TRUE)
# create empty df to hold blinks
manual_comparison <- tibble()
# loop through files and process
for (file_path in file_paths_manual) {
# add ID and pt columns from folder names
file_name_parts <- unlist(strsplit(file_path, split = "_"))
id <- file_name_parts[2]
participant <- file_name_parts[3]
# Check if the file exists before attempting to read
if (file.exists(file_path)) {
# read the blinks.csv file
data <- read_csv(file_path, col_types = cols(), skip = 1)
# Add the ID and pt columns
data$id <- sub("data/", "", id) # remove everything before the /
data$participant <- participant
# Merge this file's data into the main dataframe
manual_comparison <- bind_rows(manual_comparison, data)
}
}
# clean names
manual_comparison <- janitor::clean_names(manual_comparison)
View(manual_comparison)
View(pupil_timestamps)
View(manual_comparison)
# clean names
manual_comparison <- janitor::clean_names(manual_comparison) %>%
# remove rows with trial timestamps
filter(is.na(timestamps))
# list R01 blink files
file_paths_manual <- list.files("manual_data", pattern = "110*", full.names = TRUE, recursive = TRUE)
# create empty df to hold blinks
manual_comparison <- tibble()
# loop through files and process
for (file_path in file_paths_manual) {
# add ID and pt columns from folder names
file_name_parts <- unlist(strsplit(file_path, split = "_"))
id <- file_name_parts[2]
participant <- file_name_parts[3]
# Check if the file exists before attempting to read
if (file.exists(file_path)) {
# read the blinks.csv file
data <- read_csv(file_path, col_types = cols(), skip = 1)
# Add the ID and pt columns
data$id <- sub("data/", "", id) # remove everything before the /
data$participant <- participant
# Merge this file's data into the main dataframe
manual_comparison <- bind_rows(manual_comparison, data)
}
}
# clean names
manual_comparison <- janitor::clean_names(manual_comparison)
# filter to show rows with trial timestamps
manual_timestamps <- filter(manual_comparison, !is.na(timestamps)) %>%
# select relevant columns
select(13:14, 12, 2)
View(manual_timestamps)
# filter to show rows with trial timestamps
manual_timestamps <- filter(manual_comparison, !is.na(timestamps)) %>%
# select relevant columns
select(13:14, 12, 2) %>%
# pivot timestamps wider, one row per pt
pivot_wider(names_from = timestamps, values_from = begin_time_ss_msec)
# filter to show rows with trial timestamps
manual_timestamps <- filter(manual_comparison, !is.na(timestamps)) %>%
# select relevant columns
select(13:14, 12, 2) %>%
# pivot timestamps wider, one row per pt
pivot_wider(names_from = timestamps, values_from = begin_time_ss_msec) %>%
# clean names
janitor::clean_names()
# filter timestamps (as rows) out of manual_comparison
manual_comparison_ts <- filter(manual_comparison, is.na(timestamps)) %>%
# add timestamps (as columns)
left_join(manual_timestamps, join_by(id == id, participant == participant)) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
begin_time_ss_msec >= pprep_start & end_time_ss_msec <= pprep_end ~ "pprep",
begin_time_ss_msec >= pspeech_start & end_time_ss_msec <= pspeech_end ~ "pspeech",
begin_time_ss_msec >= cprep_start & end_time_ss_msec <= cprep_end ~ "cprep",
begin_time_ss_msec >= cspeech_start & end_time_ss_msec <= cspeech_end ~ "cspeech",
.default = NA
)) %>%
# select relevant columns
select(id, participant, begin_time_ss_msec, end_time_ss_msec, duration_msec, blink_type) %>%
# rename columns for consistency with pupil blinks
rename(start_timestamp_s = begin_time_ss_msec, end_timestamp_s = end_time_ss_msec, duration_ms = duration_msec) %>%
# remove blinks outside of task sections
filter(!is.na(blink_type))
View(manual_comparison_ts)
manual_comparison_ts <- filter(manual_comparison, is.na(timestamps)) %>%
# add timestamps (as columns)
left_join(manual_timestamps, join_by(id == id, participant == participant)) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
begin_time_ss_msec >= pprep_start & end_time_ss_msec <= pprep_end ~ "pprep",
begin_time_ss_msec >= pspeech_start & end_time_ss_msec <= pspeech_end ~ "pspeech",
begin_time_ss_msec >= cprep_start & end_time_ss_msec <= cprep_end ~ "cprep",
begin_time_ss_msec >= cspeech_start & end_time_ss_msec <= cspeech_end ~ "cspeech",
.default = NA
)) %>%
# select relevant columns
select(id, participant, begin_time_ss_msec, end_time_ss_msec, duration_msec, blink_type) %>%
# rename columns for consistency with pupil blinks
rename(start_timestamp_s = begin_time_ss_msec, end_timestamp_s = end_time_ss_msec, duration_ms = duration_msec) %>%
# remove blinks outside of task sections
filter(!is.na(blink_type)) %>%
# add column to identify manual blinks
mutate(blink_source = "manual")
# add timestamps to pupil_comparison
pupil_comparison_ts <- left_join(pupil_comparison, pupil_timestamps, join_by(id == id, participant == participant, recording_id == recording_id)) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
start_timestamp_ns >= pprep_start & end_timestamp_ns <= pprep_end ~ "pprep",
start_timestamp_ns >= pspeech_start & end_timestamp_ns <= pspeech_end ~ "pspeech",
start_timestamp_ns >= cprep_start & end_timestamp_ns <= cprep_end ~ "cprep",
start_timestamp_ns >= cspeech_start & end_timestamp_ns <= cspeech_end ~ "cspeech",
.default = NA
)) %>%
# remove blinks outside of task sections
filter(!is.na(blink_type)) %>%
# convert UTC to relative timestamp in s
mutate(start_timestamp_s = (start_timestamp_ns - recording_begin)/(10^9), end_timestamp_s = (end_timestamp_ns - recording_begin)/(10^9)) %>%
# select relevant columns
select(id, blink_id, start_timestamp_s, end_timestamp_s, duration_ms, blink_type) %>%
# add column to identify pupil blinks
mutate(blink_source = "pupil")
# combine manual and pupil blinks into one table
full_comparison <- bind_rows(manual_comparison_ts, pupil_comparison_ts)
View(full_comparison)
# add timestamps to pupil_comparison
pupil_comparison_ts <- left_join(pupil_comparison, pupil_timestamps, join_by(id == id, participant == participant, recording_id == recording_id)) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
start_timestamp_ns >= pprep_start & end_timestamp_ns <= pprep_end ~ "pprep",
start_timestamp_ns >= pspeech_start & end_timestamp_ns <= pspeech_end ~ "pspeech",
start_timestamp_ns >= cprep_start & end_timestamp_ns <= cprep_end ~ "cprep",
start_timestamp_ns >= cspeech_start & end_timestamp_ns <= cspeech_end ~ "cspeech",
.default = NA
)) %>%
# remove blinks outside of task sections
filter(!is.na(blink_type)) %>%
# convert UTC to relative timestamp in s
mutate(start_timestamp_s = (start_timestamp_ns - recording_begin)/(10^9), end_timestamp_s = (end_timestamp_ns - recording_begin)/(10^9)) %>%
# select relevant columns
select(id, participant, start_timestamp_s, end_timestamp_s, duration_ms, blink_type) %>%
# add column to identify pupil blinks
mutate(blink_source = "pupil")
# combine manual and pupil blinks into one table
full_comparison <- bind_rows(manual_comparison_ts, pupil_comparison_ts)
# combine manual and pupil blinks into one table
full_comparison <- bind_rows(manual_comparison_ts, pupil_comparison_ts) %>%
# group by blink source, pt id, and blink type
group_by(blink_source, id, blink_type) %>%
# count blinks for each pt by task section and blink source
summarise(blink_count = n())
# combine manual and pupil blinks into one table
full_comparison <- bind_rows(manual_comparison_ts, pupil_comparison_ts) %>%
# group by blink source, pt id, and blink type
group_by(blink_source, id, blink_type) %>%
# count blinks for each pt by task section and blink source
summarise(blink_count = n()) %>%
# pivot wider, one row per pt per task section
pivot_wider(names_from = blink_source, values_from = blink_count)
# combine manual and pupil blinks into one table
full_comparison <- bind_rows(manual_comparison_ts, pupil_comparison_ts) %>%
# group by blink source, pt id, and blink type
group_by(blink_source, id, blink_type) %>%
# count blinks for each pt by task section and blink source
summarise(blink_count = n()) %>%
# pivot wider, one row per pt per task section
pivot_wider(names_from = blink_source, values_from = blink_count) %>%
# calculate differences
mutate(
difference_n = manual - pupil,
difference_perc = (manual - pupil)/pupil
)
# combine manual and pupil blinks into one table
full_comparison <- bind_rows(manual_comparison_ts, pupil_comparison_ts) %>%
# group by blink source, pt id, and blink type
group_by(blink_source, id, blink_type) %>%
# count blinks for each pt by task section and blink source
summarise(blink_count = n()) %>%
# pivot wider, one row per pt per task section
pivot_wider(names_from = blink_source, values_from = blink_count) %>%
# calculate differences
mutate(
difference_n = manual - pupil,
difference_perc = round(100*(manual - pupil)/pupil, 2)
)
# combine manual and pupil blinks into one table
full_comparison <- bind_rows(manual_comparison_ts, pupil_comparison_ts) %>%
# group by blink source, pt id, and blink type
group_by(blink_source, id, blink_type) %>%
# count blinks for each pt by task section and blink source
summarise(blink_count = n()) %>%
# pivot wider, one row per pt per task section
pivot_wider(names_from = blink_source, values_from = blink_count) %>%
# calculate differences
mutate(
difference_n = manual - pupil,
difference_perc = round(100*(manual - pupil)/pupil, 2)
) %>%
# write to csv
write_csv("blink_comparison.csv")
