# add ID and pt columns from folder names
file_name_parts <- unlist(strsplit(file_path, split = "/|-"))
id <- file_name_parts[5]
participant <- file_name_parts[6]
# check if file exists before attempting to read
if (file.exists(file_path)) {
# read the events.csv file
data <- read_csv(file_path, col_types = cols())
# add the ID and pt columns
data$id <- as.numeric(id)
data$participant <- sub("_.*", "", participant)  # Remove everything after the underscore
# merge into main df
pupil_r56_timestamps <- bind_rows(pupil_r56_timestamps, data)
}
}
# remove event type columns
pupil_r56_timestamps <- select(pupil_r56_timestamps, 1:3, 5:6) %>%
# pivot the timestamps wider, one row per pt
pivot_wider(names_from = name, values_from = "timestamp [ns]") %>%
# clean names
janitor::clean_names()
# add timestamps to pupil_r56_export
pupil_r56_ts <- left_join(pupil_r56, pupil_r56_timestamps, join_by(id == id, participant == participant, recording_id == recording_id)) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
start_timestamp_ns >= pprep_start & end_timestamp_ns <= pprep_end ~ "pprep",
start_timestamp_ns >= pspeech_start & end_timestamp_ns <= pspeech_end ~ "pspeech",
start_timestamp_ns >= cprep_start & end_timestamp_ns <= cprep_end ~ "cprep",
start_timestamp_ns >= cspeech_start & end_timestamp_ns <= cspeech_end ~ "cspeech",
.default = NA
)) %>%
# remove blinks outside of task sections
filter(!is.na(blink_type)) %>%
# convert UTC to relative timestamp in s
mutate(start_timestamp_s = (start_timestamp_ns - recording_begin)/(10^9), end_timestamp_s = (end_timestamp_ns - recording_begin)/(10^9)) %>%
# select relevant columns
select(id, participant, start_timestamp_s, end_timestamp_s, duration_ms, blink_type)
# combine r01 and r56 blinks into one table
all_blinks <- bind_rows(pupil_r56_ts, pupil_r01_ts) %>%
# group by id, pt, and blink type
group_by(id, participant, blink_type) %>%
# count blinks for each pt by task section
summarise(blink_count = n()) %>%
# pivot wider, one row per pt per task section
pivot_wider(names_from = blink_type, values_from = blink_count)
# write to csv
# write_csv("../data/raw/complete_blink_data.csv")
# identify potential errors in timestamping
all_blinks_na <- filter(all_blinks, is.na(cprep) | is.na(cspeech) | is.na(pprep) | is.na(pspeech))
View(all_blinks_na)
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(tidyverse)
library(readxl)
# APA formatting
theme_apa <- papaja::theme_apa
# variable for current date
datetoday <- Sys.Date()
# variable for data folder
existing_folder <- "data"
# create folder inside data folder named with current date
new_folder <- file.path(existing_folder, datetoday)
dir.create(new_folder)
# upload dataset files and clean up headers
redcap_data <- read_csv("../data/raw/redcap_data.csv") %>%
janitor::clean_names()
blink_data <- read_csv("../data/raw/complete_blink_data.csv") %>%
janitor::clean_names()
# load HBQ aux file for categorizing questions for subscales
hbq_items <- read_csv("../auxiliaries/hbq_items.csv", col_select = c("r01_item", "subscale"))
# replace NA values in race columns with 0
redcap_data$demo_child_race_6 <- replace_na(redcap_data$demo_child_race_6, 0)
redcap_data$demo_race_6 <- replace_na(redcap_data$demo_race_6, 0)
# filter out enrollment/recruitment arms
redcap_data <- filter(redcap_data, redcap_event_name == "t1_arm_1" | redcap_event_name == "t1_arm_2" | redcap_event_name == "pcat_arm_1" | redcap_event_name == "pcat_arm_4") %>%
# calculate parent and child ages in months and years
mutate(c_age_y = time_length(interval(demo_child_dob,tsst_date),"year"),
c_age_m = time_length(interval(demo_child_dob,tsst_date),"month"),
p_age_y = time_length(interval(demo_dob,tsst_date),"year"),
p_age_m = time_length(interval(demo_dob,tsst_date),"month")) %>%
# combine race columns into one and convert to factor
mutate(c_race = factor(case_when(
demo_child_race_6 == 1 | demo_child_race_1 + demo_child_race_2 + demo_child_race_3 + demo_child_race_4 + demo_child_race_5 + demo_child_race_7 > 1 ~ 6,
demo_child_race_1 == 1 ~ 1,
demo_child_race_2 == 1 ~ 2,
demo_child_race_3 == 1 ~ 3,
demo_child_race_4 == 1 ~ 4,
demo_child_race_5 == 1 ~ 5,
demo_child_race_7 == 1 ~ 7,
.default = NA
),
levels = c(1:7, NA),
labels = c("White", "Black/African American", "Asian", "Native Hawaiian/Pacific Islander", "American Indian/Alaskan Native", "Multiracial", "Other")),
p_race = factor(case_when(
demo_race_6 == 1 | demo_race_1 + demo_race_2 + demo_race_3 + demo_race_4 + demo_race_5 + demo_race_7 > 1 ~ 6,
demo_race_1 == 1 ~ 1,
demo_race_2 == 1 ~ 2,
demo_race_3 == 1 ~ 3,
demo_race_4 == 1 ~ 4,
demo_race_5 == 1 ~ 5,
demo_race_7 == 1 ~ 7,
.default = NA
),
levels = c(1:7, NA),
labels = c("White", "Black/African American", "Asian", "Native Hawaiian/Pacific Islander", "American Indian/Alaskan Native", "Multiracial", "Other"))) %>%
# convert sex and ethnicity to factors and education and income to orders
mutate(demo_child_sex = factor(demo_child_sex, levels = c(1:3, -999, NA), labels = c("Male", "Female", "Intersex", "Refused")),
demo_sex = factor(demo_sex, levels = c(1:3,-999,NA), labels = c("Male", "Female", "Intersex", "Refused")),
demo_child_ethnicity = factor(demo_child_ethnicity, levels = c(0:1, -999, NA), labels = c("Non-Hispanic/Latino", "Hispanic/Latino", "Refused")),
demo_ethnicity = factor(demo_ethnicity, levels = c(0:1, -999, NA), labels = c("Non-Hispanic/Latino", "Hispanic/Latino", "Refused")),
demo_degree = ordered(demo_degree, levels = c(1:9, -999, NA), labels = c("No Diploma or Degree", "GED", "High School Diploma", "Associate's Degree", "Bachelor's Degree", "Master's Degree", "Doctorate (PhD, MD, JD, etc.)", "Some College", "Other", "Refused")),
demo_combinedincome = ordered(demo_combinedincome, levels = c(1:8, -999, NA), labels = c("Less than $20,000", "$20,000 to $39,999", "$40,000 to $59,999", "$60,000 to $79,999", "$80,000 to $99,999", "$100,000 to $119,999", "$120,000 to $250,000", "More than $250,000", "Refused")))
# select hbq data from main df
hbq_scores <- select(redcap_data, demo_recordid, hbq_68:hbq_136) %>%
# pivot longer, one row per hbq item
pivot_longer(cols = hbq_68:hbq_136, names_to = "hbq_varname", values_to = "hbq_resp") %>%
# add subscales from hbq_items
left_join(hbq_items, join_by(hbq_varname == r01_item)) %>%
# replace -99 with NA, add column for omitting from subscale scoring
mutate(hbq_resp = na_if(hbq_resp, -99)) %>%
mutate(omit = case_when(
is.na(hbq_resp) ~ 1,
.default = 0
)) %>%
# group by record id and subscale for scoring
group_by(demo_recordid, subscale) %>%
# calculate subscales and omitted questions
summarise(hbq_score = round(mean(hbq_resp, na.rm = TRUE), 2),
hbq_omit = sum(omit, na.rm = TRUE)) %>%
ungroup() %>%
# remove subscale scores with too many NA values (1 NA allowed for overanxious and separation_anxiety, 0 allowed for social_inhibition)
mutate(hbq_score = case_when(
(subscale == "overanxious" | subscale == "separation_anxiety") & hbq_omit > 1 ~ NA,
subscale == "social_inhibition" & hbq_omit > 0 ~ NA,
.default = hbq_score
)) %>%
# pivot wider, one row per pt
pivot_wider(id_cols = "demo_recordid", names_from = "subscale", values_from = "hbq_score")
View(blink_data)
blink_data_child <- filter(blink_data, participant == "c")
View(blink_data_child)
child_data <- select(redcap_data, 1, 66:67, 5, 70, 14, 26:33, 38:40, 37) %>%
rename(record_id = demo_recordid,
age_y = c_age_y,
age_m = c_age_m,
sex = demo_child_sex,
race = c_race,
ethnicity = demo_child_ethnicity,
parent_edu = demo_degree,
parent_income = demo_combinedincome,
ses_country = demo_ladder_usa_self,
ses_community = demo_ladder_community_self,
pre_anxiety = pre_tsst_1,
pre_joy = pre_tsst_2,
pre_success = pre_tsst_3,
pre_meta = pre_tsst_4,
post_anxiety = post_tsst_c_1,
post_joy = post_tsst_c_2,
post_success = post_tsst_c_3,
post_meta = post_tsst_4) %>%
# add column to identify pts as children and column for child id
mutate(record_id_chr = paste0(as.character(record_id), "_C"),
parent_child = 1,
.before = age_y) %>%
# add hbq subscales
left_join(hbq_scores, join_by(record_id == demo_recordid)) %>%
# calculate overall anxiety score
mutate(hbq_anxiety = overanxious + separation_anxiety + social_inhibition)
View(child_data)
child_data <- left_join(child_data, blink_data_child, join_by("record_id" == "id"))
View(child_data)
# filter child blink data into new df
blink_data_child <- filter(blink_data, participant == "c")
# select and rename variables for child data
child_data <- select(redcap_data, 1, 66:67, 5, 70, 14, 26:33, 38:40, 37) %>%
rename(record_id = demo_recordid,
age_y = c_age_y,
age_m = c_age_m,
sex = demo_child_sex,
race = c_race,
ethnicity = demo_child_ethnicity,
parent_edu = demo_degree,
parent_income = demo_combinedincome,
ses_country = demo_ladder_usa_self,
ses_community = demo_ladder_community_self,
pre_anxiety = pre_tsst_1,
pre_joy = pre_tsst_2,
pre_success = pre_tsst_3,
pre_meta = pre_tsst_4,
post_anxiety = post_tsst_c_1,
post_joy = post_tsst_c_2,
post_success = post_tsst_c_3,
post_meta = post_tsst_4) %>%
# add hbq subscales
full_join(hbq_scores, join_by(record_id == demo_recordid)) %>%
# calculate overall anxiety score
mutate(hbq_anxiety = overanxious + separation_anxiety + social_inhibition) %>%
# add blink data
full_join(blink_data_child, join_by(record_id == id)) %>%
# add column to identify pts as children and column for child id
mutate(record_id_chr = paste0(as.character(record_id), "_C"),
parent_child = 1,
.before = age_y)
View(child_data)
# filter parent blink data into new df
blink_data_parent <- filter(blink_data, participant == "p")
# select and rename variables for parent data
parent_data <- select(redcap_data, 1, 68:69, 16, 71, 25:37) %>%
rename(record_id = demo_recordid,
age_y = p_age_y,
age_m = p_age_m,
sex = demo_sex,
race = p_race,
ethnicity = demo_ethnicity,
parent_edu = demo_degree,
parent_income = demo_combinedincome,
ses_country = demo_ladder_usa_self,
ses_community = demo_ladder_community_self,
pre_anxiety = pre_tsst_1,
pre_joy = pre_tsst_2,
pre_success = pre_tsst_3,
pre_meta = pre_tsst_4,
post_anxiety = post_tsst_1,
post_joy = post_tsst_2,
post_success = post_tsst_3,
post_meta = post_tsst_4) %>%
# add hbq subscales
full_join(hbq_scores, join_by(record_id == demo_recordid)) %>%
# calculate overall anxiety score
mutate(hbq_anxiety = overanxious + separation_anxiety + social_inhibition) %>%
# add blink data
full_join(blink_data_parent, join_by(record_id == id)) %>%
# add column to identify pts as children and column for child id
mutate(record_id_chr = paste0(as.character(record_id), "_P"),
parent_child = 0,
.before = age_y)
View(pupil_r01_timestamps)
timestamps <- bind_rows(pupil_r01_timestamps, pupil_r56_timestamps) %>%
# calculate prep and speech durations in nanoseconds, convert to minutes
mutate(pprep_duration_ns = pprep_end - pprep_start,
pprep_duration = (pprep_duration_ns * 10^-9)/60,
pspeech_duration_ns = pspeech_end - pspeech_start,
pspeech_duration = (pspeech_duration_ns * 10^-9)/60,
cprep_duration_ns = cprep_end - cprep_start,
cprep_duration = (cprep_duration_ns * 10^-9)/60,
cspeech_duration_ns = cspeech_end - cspeech_start,
cspeech_duration = (cspeech_duration_ns * 10^-9)/60) %>%
# select relevant columns
select(id, participant, pprep_duration, pspeech_duration, cprep_duration, cspeech_duration)
View(timestamps)
child_data_blinks <- full_join(child_data, timestamps, join_by(record_id == id)) %>%
# calculate blink rates
mutate(pprep_blinkrate = pprep_blinks/pprep_duration,
pspeech_blinkrate = pspeech_blinks/pspeech_duration,
cprep_blinkrate = cprep_blinks/cprep_duration,
cspeech_blinkrate = cspeech_blinks/cspeech_duration)
child_data_blinks <- full_join(child_data, timestamps, join_by(record_id == id)) %>%
# calculate blink rates
mutate(pprep_blinkrate = pprep/pprep_duration,
pspeech_blinkrate = pspeech/pspeech_duration,
cprep_blinkrate = cprep/cprep_duration,
cspeech_blinkrate = cspeech/cspeech_duration)
View(child_data_blinks)
parent_data_blinks <- full_join(parent_data, timestamps, join_by(record_id == id)) %>%
mutate(pprep_blinkrate = pprep/pprep_duration,
pspeech_blinkrate = pspeech/pspeech_duration,
cprep_blinkrate = cprep/cprep_duration,
cspeech_blinkrate = cspeech/cspeech_duration)
# variable for data folder
existing_folder <- "../data/tidy"
# create folder inside data folder named with current date
new_folder <- file.path(existing_folder, datetoday)
dir.create(new_folder)
# inner join demo_clean and ep_clean
data_complete <- bind_rows(child_data_blinks, parent_data_blinks)
# write data_complete to .csv
write.csv(data_complete, file = paste0(new_folder, "/data_complete.csv"), row.names = FALSE)
View(data_complete)
View(blink_data_child)
View(hbq_scores)
data_complete <- tibble()
data_complete <- bind_rows(child_data_blinks, parent_data_blinks)
View(child_data_blinks)
View(blink_data_parent)
# filter child blink data into new df
blink_data_child <- filter(blink_data, participant == "c")
# select and rename variables for child data
child_data <- select(redcap_data, 1, 66:67, 5, 70, 14, 26:33, 38:40, 37) %>%
rename(record_id = demo_recordid,
age_y = c_age_y,
age_m = c_age_m,
sex = demo_child_sex,
race = c_race,
ethnicity = demo_child_ethnicity,
parent_edu = demo_degree,
parent_income = demo_combinedincome,
ses_country = demo_ladder_usa_self,
ses_community = demo_ladder_community_self,
pre_anxiety = pre_tsst_1,
pre_joy = pre_tsst_2,
pre_success = pre_tsst_3,
pre_meta = pre_tsst_4,
post_anxiety = post_tsst_c_1,
post_joy = post_tsst_c_2,
post_success = post_tsst_c_3,
post_meta = post_tsst_4) %>%
# add hbq subscales
full_join(hbq_scores, join_by(record_id == demo_recordid)) %>%
# calculate overall anxiety score
mutate(hbq_anxiety = overanxious + separation_anxiety + social_inhibition) %>%
# add blink data
%full_join(blink_data_child, join_by(record_id == id)) %>%
# filter child blink data into new df
blink_data_child <- filter(blink_data, participant == "c")
# select and rename variables for child data
child_data <- select(redcap_data, 1, 66:67, 5, 70, 14, 26:33, 38:40, 37) %>%
rename(record_id = demo_recordid,
age_y = c_age_y,
age_m = c_age_m,
sex = demo_child_sex,
race = c_race,
ethnicity = demo_child_ethnicity,
parent_edu = demo_degree,
parent_income = demo_combinedincome,
ses_country = demo_ladder_usa_self,
ses_community = demo_ladder_community_self,
pre_anxiety = pre_tsst_1,
pre_joy = pre_tsst_2,
pre_success = pre_tsst_3,
pre_meta = pre_tsst_4,
post_anxiety = post_tsst_c_1,
post_joy = post_tsst_c_2,
post_success = post_tsst_c_3,
post_meta = post_tsst_4) %>%
# add hbq subscales
full_join(hbq_scores, join_by(record_id == demo_recordid)) %>%
# calculate overall anxiety score
mutate(hbq_anxiety = overanxious + separation_anxiety + social_inhibition) %>%
# add blink data
#full_join(blink_data_child, join_by(record_id == id)) %>%
# add column to identify pts as children and column for child id
mutate(record_id_chr = paste0(as.character(record_id), "_C"),
parent_child = 1,
.before = age_y)
View(child_data)
# filter child blink data into new df
blink_data_child <- filter(blink_data, participant == "c")
# select and rename variables for child data
child_data <- select(redcap_data, 1, 66:67, 5, 70, 14, 26:33, 38:40, 37) %>%
rename(record_id = demo_recordid,
age_y = c_age_y,
age_m = c_age_m,
sex = demo_child_sex,
race = c_race,
ethnicity = demo_child_ethnicity,
parent_edu = demo_degree,
parent_income = demo_combinedincome,
ses_country = demo_ladder_usa_self,
ses_community = demo_ladder_community_self,
pre_anxiety = pre_tsst_1,
pre_joy = pre_tsst_2,
pre_success = pre_tsst_3,
pre_meta = pre_tsst_4,
post_anxiety = post_tsst_c_1,
post_joy = post_tsst_c_2,
post_success = post_tsst_c_3,
post_meta = post_tsst_4) %>%
# add hbq subscales
full_join(hbq_scores, join_by(record_id == demo_recordid)) %>%
# calculate overall anxiety score
mutate(hbq_anxiety = overanxious + separation_anxiety + social_inhibition) %>%
# add blink data
full_join(blink_data_child, join_by(record_id == id)) %>%
# add column to identify pts as children and column for child id
mutate(record_id_chr = paste0(as.character(record_id), "_C"),
parent_child = 1,
.before = age_y)
# filter child blink data into new df
blink_data_child <- filter(blink_data, participant == "c")
# select and rename variables for child data
child_data <- select(redcap_data, 1, 66:67, 5, 70, 14, 26:33, 38:40, 37) %>%
rename(record_id = demo_recordid,
age_y = c_age_y,
age_m = c_age_m,
sex = demo_child_sex,
race = c_race,
ethnicity = demo_child_ethnicity,
parent_edu = demo_degree,
parent_income = demo_combinedincome,
ses_country = demo_ladder_usa_self,
ses_community = demo_ladder_community_self,
pre_anxiety = pre_tsst_1,
pre_joy = pre_tsst_2,
pre_success = pre_tsst_3,
pre_meta = pre_tsst_4,
post_anxiety = post_tsst_c_1,
post_joy = post_tsst_c_2,
post_success = post_tsst_c_3,
post_meta = post_tsst_4) %>%
# add hbq subscales
full_join(hbq_scores, join_by(record_id == demo_recordid)) %>%
# calculate overall anxiety score
mutate(hbq_anxiety = overanxious + separation_anxiety + social_inhibition) %>%
# add blink data
#full_join(blink_data_child, join_by(record_id == id)) %>%
# add column to identify pts as children and column for child id
mutate(record_id_chr = paste0(as.character(record_id), "_C"),
parent_child = 1,
.before = age_y)
View(child_data)
View(blink_data_child)
blink_data_child <- filter(blink_data, participant == "c") %>%
select(1, 3:6)
child_data <- select(redcap_data, 1, 66:67, 5, 70, 14, 26:33, 38:40, 37) %>%
rename(record_id = demo_recordid,
age_y = c_age_y,
age_m = c_age_m,
sex = demo_child_sex,
race = c_race,
ethnicity = demo_child_ethnicity,
parent_edu = demo_degree,
parent_income = demo_combinedincome,
ses_country = demo_ladder_usa_self,
ses_community = demo_ladder_community_self,
pre_anxiety = pre_tsst_1,
pre_joy = pre_tsst_2,
pre_success = pre_tsst_3,
pre_meta = pre_tsst_4,
post_anxiety = post_tsst_c_1,
post_joy = post_tsst_c_2,
post_success = post_tsst_c_3,
post_meta = post_tsst_4) %>%
# add hbq subscales
full_join(hbq_scores, join_by(record_id == demo_recordid)) %>%
# calculate overall anxiety score
mutate(hbq_anxiety = overanxious + separation_anxiety + social_inhibition) %>%
# add blink data
full_join(blink_data_child, join_by(record_id == id)) %>%
# add column to identify pts as children and column for child id
mutate(record_id_chr = paste0(as.character(record_id), "_C"),
parent_child = 1,
.before = age_y)
# filter parent blink data into new df
blink_data_parent <- filter(blink_data, participant == "p") %>%
select(1, 3:6)
# select and rename variables for parent data
parent_data <- select(redcap_data, 1, 68:69, 16, 71, 25:37) %>%
rename(record_id = demo_recordid,
age_y = p_age_y,
age_m = p_age_m,
sex = demo_sex,
race = p_race,
ethnicity = demo_ethnicity,
parent_edu = demo_degree,
parent_income = demo_combinedincome,
ses_country = demo_ladder_usa_self,
ses_community = demo_ladder_community_self,
pre_anxiety = pre_tsst_1,
pre_joy = pre_tsst_2,
pre_success = pre_tsst_3,
pre_meta = pre_tsst_4,
post_anxiety = post_tsst_1,
post_joy = post_tsst_2,
post_success = post_tsst_3,
post_meta = post_tsst_4) %>%
# add hbq subscales
full_join(hbq_scores, join_by(record_id == demo_recordid)) %>%
# calculate overall anxiety score
mutate(hbq_anxiety = overanxious + separation_anxiety + social_inhibition) %>%
# add blink data
full_join(blink_data_parent, join_by(record_id == id)) %>%
# add column to identify pts as children and column for child id
mutate(record_id_chr = paste0(as.character(record_id), "_P"),
parent_child = 0,
.before = age_y)
child_data_blinks <- full_join(child_data, timestamps, join_by(record_id == id)) %>%
# calculate blink rates
mutate(pprep_blinkrate = pprep/pprep_duration,
pspeech_blinkrate = pspeech/pspeech_duration,
cprep_blinkrate = cprep/cprep_duration,
cspeech_blinkrate = cspeech/cspeech_duration)
# filter child timestamps
timestamps_child <- filter(timestamps, participant == "c")
child_data_blinks <- full_join(child_data, timestamps, join_by(record_id == id)) %>%
# calculate blink rates
mutate(pprep_blinkrate = pprep/pprep_duration,
pspeech_blinkrate = pspeech/pspeech_duration,
cprep_blinkrate = cprep/cprep_duration,
cspeech_blinkrate = cspeech/cspeech_duration)
child_data_blinks <- full_join(child_data, timestamps_child, join_by(record_id == id)) %>%
# calculate blink rates
mutate(pprep_blinkrate = pprep/pprep_duration,
pspeech_blinkrate = pspeech/pspeech_duration,
cprep_blinkrate = cprep/cprep_duration,
cspeech_blinkrate = cspeech/cspeech_duration)
View(child_data_blinks)
timestamps_parent <- filter(timestamps, participant == "p")
parent_data_blinks <- full_join(parent_data, timestamps_parent, join_by(record_id == id)) %>%
mutate(pprep_blinkrate = pprep/pprep_duration,
pspeech_blinkrate = pspeech/pspeech_duration,
cprep_blinkrate = cprep/cprep_duration,
cspeech_blinkrate = cspeech/cspeech_duration)
data_complete <- bind_rows(child_data_blinks, parent_data_blinks)
View(data_complete)
data_complete <- bind_rows(child_data_blinks, parent_data_blinks) %>%
# remove pts with no data (how did they even get in here ??)
filter(!if_all(4:37, is.na()))
data_complete <- bind_rows(child_data_blinks, parent_data_blinks) %>%
# remove pts with no data (how did they even get in here ??)
filter(!if_all(4:37, is.na))
View(data_complete)
write.csv(data_complete, file = paste0(new_folder, "/data_complete.csv"), row.names = FALSE)
