demo_data <- read_csv("data/raw/demo.csv") %>%
janitor::clean_names()
ep_data <- read_csv("data/raw/ep_questionnaires.csv") %>%
janitor::clean_names()
hbq_data <- read_csv("data/raw/hbq_scores_overall.csv") %>%
janitor::clean_names()
timestamps <- read_csv("data/raw/merged_events_data.csv") %>%
janitor::clean_names()
blink_data <- read_csv("data/raw/blink_data_tsst.csv") %>%
janitor::clean_names()
timestamps_cloud <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "cloud")
timestamps_rec <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "recording")
View(timestamps_cloud)
timestamps_cloud <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "cloud")
timestamps_rec <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "recording")
timestamp_data <- full_join(timestamps_cloud, timestamps_rec)
View(timestamp_data)
timestamps_cloud <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "cloud")
timestamps_rec <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "recording")
timestamp_data <- full_join(timestamps_cloud, timestamps_rec, recording_id == recording_id)
timestamps_cloud <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "cloud")
timestamps_rec <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "recording")
timestamp_data <- full_join(timestamps_cloud, timestamps_rec, join_by(recording_id == recording_id))
timestamps_cloud <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "cloud")
timestamps_rec <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "recording")
timestamp_data <- full_join(timestamps_cloud, timestamps_rec, join_by(recording_id, id, participant, recording.begin, pprep.start, pprep.end, pspeech.start, pspeech.end, cprep.start, cprep.end, cspeech.start, cspeech.end, recording.end))
timestamps_cloud <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "cloud")
timestamps_rec <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "recording")
timestamp_data <- full_join(timestamps_cloud, timestamps_rec, join_by(recording_id))
timestamps_cloud <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "cloud")
timestamps_rec <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "recording")
timestamp_data <- full_join(timestamps_cloud, timestamps_rec, join_by(recording_id)) %>%
select(id.x, participant.x, recording.begin.y, pprep.start.x, pprep.end.x, pspeech.start.x, pspeech.end.x, cprep.start.x, cprep.end.x, cspeech.start.x, cspeech.end.x, recording.end.y)
timestamps_cloud <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "cloud")
timestamps_rec <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "recording")
timestamp_data <- full_join(timestamps_cloud, timestamps_rec, join_by(recording_id)) %>%
select(id.x, participant.x, recording.begin.y, pprep.start.x, pprep.end.x, pspeech.start.x, pspeech.end.x, cprep.start.x, cprep.end.x, cspeech.start.x, cspeech.end.x, recording.end.y) %>%
rename(record_id = id.x, parent_child = participant.x, recording_begin = recording.begin.y, pprep_start = pprep.start.x, pprep_end = pprep.end.x, pspeech_start = pspeech.start.x, pspeech_end = pspeech.end.x, cprep_start = cprep.start.x, cprep_end = cprep.end.x, cspeech_start = cspeech.start.x, cspeech_end = cspeech.end.x, recording_end = recording.end.y)
timestamps_cloud <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "cloud")
timestamps_rec <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "recording")
timestamp_data <- full_join(timestamps_cloud, timestamps_rec, join_by(recording_id)) %>%
select(id.x, participant.x, recording.begin.y, pprep.start.x, pprep.end.x, pspeech.start.x, pspeech.end.x, cprep.start.x, cprep.end.x, cspeech.start.x, cspeech.end.x, recording.end.y) %>%
rename(record_id = id.x, parent_child = participant.x, recording_begin = recording.begin.y, pprep_start = pprep.start.x, pprep_end = pprep.end.x, pspeech_start = pspeech.start.x, pspeech_end = pspeech.end.x, cprep_start = cprep.start.x, cprep_end = cprep.end.x, cspeech_start = cspeech.start.x, cspeech_end = cspeech.end.x, recording_end = recording.end.y) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_", as.character(parent_child)), .before = recording_begin)
# create tables for cloud and recording timestamps
# pivot to create columns for each type of timestamp
timestamps_cloud <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "cloud")
timestamps_rec <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "recording")
# combine cloud and recording timestamps, clean up variable names
timestamp_data <- full_join(timestamps_cloud, timestamps_rec, join_by(recording_id)) %>%
select(id.x, participant.x, recording.begin.y, pprep.start.x, pprep.end.x, pspeech.start.x, pspeech.end.x, cprep.start.x, cprep.end.x, cspeech.start.x, cspeech.end.x, recording.end.y) %>%
rename(record_id = id.x, parent_child = participant.x, recording_begin = recording.begin.y, pprep_start = pprep.start.x, pprep_end = pprep.end.x, pspeech_start = pspeech.start.x, pspeech_end = pspeech.end.x, cprep_start = cprep.start.x, cprep_end = cprep.end.x, cspeech_start = cspeech.start.x, cspeech_end = cspeech.end.x, recording_end = recording.end.y) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_", as.character(parent_child)), .before = recording_begin)
# calculate parent prep time
pprep <- mutate(timestamp_data, pprep_duration = pprep_end - pprep_start)
View(pprep)
View(pprep)
# calculate prep and speech durations in nanoseconds, convert to seconds
timestamp_data <- mutate(pprep_duration_ns = pprep_end - pprep_start,
pprep_duration = pprep_duration_ns * 10^-9,
pspeech_duration_ns = pspeech_end - pspeech_start,
pspeech_duration = pspeech_duration_ns * 10^-9,
cprep_duration_ns = cprep_end - cprep_start,
cprep_duration = cprep_duration_ns * 10^-9,
cspeech_duration_ns = cspeech_end - cspeech_start,
cspeech_duration = cspeech_duration_ns * 10^-9)
# create tables for cloud and recording timestamps
# pivot to create columns for each type of timestamp
timestamps_cloud <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "cloud")
timestamps_rec <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "recording")
# combine cloud and recording timestamps, clean up variable names
timestamp_data <- full_join(timestamps_cloud, timestamps_rec, join_by(recording_id)) %>%
select(id.x, participant.x, recording.begin.y, pprep.start.x, pprep.end.x, pspeech.start.x, pspeech.end.x, cprep.start.x, cprep.end.x, cspeech.start.x, cspeech.end.x, recording.end.y) %>%
rename(record_id = id.x, parent_child = participant.x, recording_begin = recording.begin.y, pprep_start = pprep.start.x, pprep_end = pprep.end.x, pspeech_start = pspeech.start.x, pspeech_end = pspeech.end.x, cprep_start = cprep.start.x, cprep_end = cprep.end.x, cspeech_start = cspeech.start.x, cspeech_end = cspeech.end.x, recording_end = recording.end.y) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_", as.character(parent_child)), .before = recording_begin)
# calculate prep and speech durations in nanoseconds, convert to seconds
timestamp_data <- mutate(pprep_duration_ns = pprep_end - pprep_start,
pprep_duration = pprep_duration_ns * 10^-9,
pspeech_duration_ns = pspeech_end - pspeech_start,
pspeech_duration = pspeech_duration_ns * 10^-9,
cprep_duration_ns = cprep_end - cprep_start,
cprep_duration = cprep_duration_ns * 10^-9,
cspeech_duration_ns = cspeech_end - cspeech_start,
cspeech_duration = cspeech_duration_ns * 10^-9)
# calculate prep and speech durations in nanoseconds, convert to seconds
timestamp_data <- mutate(timestamp_data, pprep_duration_ns = pprep_end - pprep_start,
pprep_duration = pprep_duration_ns * 10^-9,
pspeech_duration_ns = pspeech_end - pspeech_start,
pspeech_duration = pspeech_duration_ns * 10^-9,
cprep_duration_ns = cprep_end - cprep_start,
cprep_duration = cprep_duration_ns * 10^-9,
cspeech_duration_ns = cspeech_end - cspeech_start,
cspeech_duration = cspeech_duration_ns * 10^-9)
View(blink_data)
blink_data <- mutate(blink_data, record_id_chr = paste0(as.character(id), "_", as.character(participant)), .before = c_prep)
# add full pt id column to blink_data
blink_data <- mutate(blink_data, record_id_chr = paste0(as.character(id), "_", as.character(participant)), .before = c_prep)
# combine blink_data and timestamp_data
blink_rates <- full_join(blink_data, timestamp_data, join_by(record_id_chr))
View(blink_rates)
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(tidyverse)
library(readxl)
# APA formatting
theme_apa <- papaja::theme_apa
# variable for current date
datetoday <- Sys.Date()
# variable for data folder
existing_folder <- "data"
# create folder inside data folder named with current date
new_folder <- file.path(existing_folder, datetoday)
dir.create(new_folder)
# upload dataset files and clean up headers
demo_data <- read_csv("data/raw/demo.csv") %>%
janitor::clean_names()
ep_data <- read_csv("data/raw/ep_questionnaires.csv") %>%
janitor::clean_names()
hbq_data <- read_csv("data/raw/hbq_scores_overall.csv") %>%
janitor::clean_names()
timestamps <- read_csv("data/raw/merged_events_data.csv") %>%
janitor::clean_names()
blink_data <- read_csv("data/raw/blink_data_tsst.csv") %>%
janitor::clean_names()
# add if needed
# select and rename variables for child demo data
demo_child_data <- demo_data %>%
select(record_id, c_age_m, c_age_y, c_sex, c_race, c_latinx, p_edu, income_house, ladder_country, ladder_community) %>%
rename(age_m = c_age_m, age_y = c_age_y, sex = c_sex, race = c_race, latinx = c_latinx, parent_edu = p_edu, ses_country = ladder_country, ses_community = ladder_community) %>%
mutate(parent_child = 1, .before = age_m) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_c"), .before = parent_child)
# select and rename variables for parent demo data
demo_parent_data <- demo_data %>%
select(record_id, p_age_m, p_age_y, p_sex, p_race, p_latinx, p_edu, income_house, ladder_country, ladder_community) %>%
rename(age_m = p_age_m, age_y = p_age_y, sex = p_sex, race = p_race, latinx = p_latinx, parent_edu = p_edu, ses_country = ladder_country, ses_community = ladder_community) %>%
mutate(parent_child = 0, .before = age_m) %>%
mutate(record_id_chr = paste0(as.character(record_id),"_p"), .before = parent_child)
# select and rename variables for child ep questionnaire data
ep_child_data <- ep_data %>%
select(record_id, preeptrier_1, preeptrier_2, preeptrier_3, preeptrier_4, posttrierc1, posttrierc2, posttrierc3, posttrier4) %>%
rename(pre_anxiety = preeptrier_1, pre_joy = preeptrier_2, pre_success = preeptrier_3, pre_meta = preeptrier_4, post_anxiety = posttrierc1, post_joy = posttrierc2, post_success = posttrierc3, post_meta = posttrier4) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_c"), .before = pre_anxiety)
# select and rename variables for parent ep questionnaire data
ep_parent_data <- ep_data %>%
select(record_id, preeptrier_1, preeptrier_2, preeptrier_3, preeptrier_4, posttrier1, posttrier2, posttrier3, posttrier4) %>%
rename(pre_anxiety = preeptrier_1, pre_joy = preeptrier_2, pre_success = preeptrier_3, pre_meta = preeptrier_4, post_anxiety = posttrier1, post_joy = posttrier2, post_success = posttrier3, post_meta = posttrier4) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_p"), .before = pre_anxiety)
# select and rename variables for child hbq data
# calculate overall anxiety score
hbq_child_data <- hbq_data %>%
select(record_id, hbq_internalizing_symptoms_overanxious, hbq_internalizing_symptoms_separation_anxiety, hbq_social_withdrawal_social_inhibition) %>%
rename(overanxious = hbq_internalizing_symptoms_overanxious, separation_anxiety = hbq_internalizing_symptoms_separation_anxiety, social_inhibition = hbq_social_withdrawal_social_inhibition) %>%
mutate(hbq_anxiety = overanxious + separation_anxiety + social_inhibition) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_c"), .before = overanxious) %>%
filter(!is.na(overanxious) | !is.na(separation_anxiety) | !is.na(social_inhibition))
# select and rename variables for parent hbq data
# calculate overall anxiety score
hbq_parent_data <- hbq_data %>%
select(record_id, hbq_internalizing_symptoms_overanxious, hbq_internalizing_symptoms_separation_anxiety, hbq_social_withdrawal_social_inhibition) %>%
rename(overanxious = hbq_internalizing_symptoms_overanxious, separation_anxiety = hbq_internalizing_symptoms_separation_anxiety, social_inhibition = hbq_social_withdrawal_social_inhibition) %>%
mutate(hbq_anxiety = overanxious + separation_anxiety + social_inhibition) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_p"), .before = overanxious) %>%
filter(!is.na(overanxious) | !is.na(separation_anxiety) | !is.na(social_inhibition))
# select and rename variables for blink data
blink_data <- mutate(blink_data, record_id_chr = paste0(as.character(id), "_", as.character(participant)), .before = c_prep)
# create tables for cloud and recording timestamps
# pivot to create columns for each type of timestamp
timestamps_cloud <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "cloud")
timestamps_rec <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "recording")
# combine cloud and recording timestamps, clean up variable names
timestamp_data <- full_join(timestamps_cloud, timestamps_rec, join_by(recording_id)) %>%
select(id.x, participant.x, recording.begin.y, pprep.start.x, pprep.end.x, pspeech.start.x, pspeech.end.x, cprep.start.x, cprep.end.x, cspeech.start.x, cspeech.end.x, recording.end.y) %>%
rename(record_id = id.x, parent_child = participant.x, recording_begin = recording.begin.y, pprep_start = pprep.start.x, pprep_end = pprep.end.x, pspeech_start = pspeech.start.x, pspeech_end = pspeech.end.x, cprep_start = cprep.start.x, cprep_end = cprep.end.x, cspeech_start = cspeech.start.x, cspeech_end = cspeech.end.x, recording_end = recording.end.y) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_", as.character(parent_child)), .before = recording_begin)
View(timestamp_data)
# calculate prep and speech durations in nanoseconds, convert to seconds
timestamp_data <- mutate(timestamp_data, pprep_duration_ns = pprep_end - pprep_start,
pprep_duration = pprep_duration_ns * 10^-9,
pspeech_duration_ns = pspeech_end - pspeech_start,
pspeech_duration = pspeech_duration_ns * 10^-9,
cprep_duration_ns = cprep_end - cprep_start,
cprep_duration = cprep_duration_ns * 10^-9,
cspeech_duration_ns = cspeech_end - cspeech_start,
cspeech_duration = cspeech_duration_ns * 10^-9) %>%
select(record_id_chr, pprep_duration, pspeech_duration, cprep_duration, cspeech_duration)
View(blink_data)
# combine blink_data and timestamp_data
blink_rates <- full_join(blink_data, timestamp_data, join_by(record_id_chr))
View(blink_rates)
# calculate prep and speech durations in nanoseconds, convert to minutes
timestamp_data <- mutate(timestamp_data, pprep_duration_ns = pprep_end - pprep_start,
pprep_duration = (pprep_duration_ns * 10^-9)/60,
pspeech_duration_ns = pspeech_end - pspeech_start,
pspeech_duration = (pspeech_duration_ns * 10^-9)/60,
cprep_duration_ns = cprep_end - cprep_start,
cprep_duration = (cprep_duration_ns * 10^-9)/60,
cspeech_duration_ns = cspeech_end - cspeech_start,
cspeech_duration = (cspeech_duration_ns * 10^-9)/60) %>%
select(record_id_chr, pprep_duration, pspeech_duration, cprep_duration, cspeech_duration)
# create tables for cloud and recording timestamps
# pivot to create columns for each type of timestamp
timestamps_cloud <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "cloud")
timestamps_rec <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "recording")
# combine cloud and recording timestamps, clean up variable names
timestamp_data <- full_join(timestamps_cloud, timestamps_rec, join_by(recording_id)) %>%
select(id.x, participant.x, recording.begin.y, pprep.start.x, pprep.end.x, pspeech.start.x, pspeech.end.x, cprep.start.x, cprep.end.x, cspeech.start.x, cspeech.end.x, recording.end.y) %>%
rename(record_id = id.x, parent_child = participant.x, recording_begin = recording.begin.y, pprep_start = pprep.start.x, pprep_end = pprep.end.x, pspeech_start = pspeech.start.x, pspeech_end = pspeech.end.x, cprep_start = cprep.start.x, cprep_end = cprep.end.x, cspeech_start = cspeech.start.x, cspeech_end = cspeech.end.x, recording_end = recording.end.y) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_", as.character(parent_child)), .before = recording_begin)
# calculate prep and speech durations in nanoseconds, convert to minutes
timestamp_data <- mutate(timestamp_data, pprep_duration_ns = pprep_end - pprep_start,
pprep_duration = (pprep_duration_ns * 10^-9)/60,
pspeech_duration_ns = pspeech_end - pspeech_start,
pspeech_duration = (pspeech_duration_ns * 10^-9)/60,
cprep_duration_ns = cprep_end - cprep_start,
cprep_duration = (cprep_duration_ns * 10^-9)/60,
cspeech_duration_ns = cspeech_end - cspeech_start,
cspeech_duration = (cspeech_duration_ns * 10^-9)/60) %>%
select(record_id_chr, pprep_duration, pspeech_duration, cprep_duration, cspeech_duration)
# combine blink_data and timestamp_data
blink_rates <- full_join(blink_data, timestamp_data, join_by(record_id_chr))
View(blink_rates)
# combine blink_data and timestamp_data
blink_rates <- full_join(blink_data, timestamp_data, join_by(record_id_chr)) %>%
# calculate blink rates
mutate(pprep_blinkrate = p_prep/pprep_duration,
pspeech_blinkrate = p_speech/pspeech_duration,
cprep_blinkrate = c_prep/cprep_duration,
cspeech_blinkrate = c_speech/cspeech_duration)
View(blink_data)
# select and rename variables for blink data
blink_data <- mutate(blink_data, record_id_chr = paste0(as.character(id), "_", as.character(participant)), .before = c_prep) %>%
rename(pprep_blinks = p_prep, pspeech_blinks = p_speech, cprep_blinkes = c_prep, cspeech_blinks = c_speech)
# create tables for cloud and recording timestamps
# pivot to create columns for each type of timestamp
timestamps_cloud <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "cloud")
timestamps_rec <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "recording")
# combine cloud and recording timestamps, clean up variable names
timestamp_data <- full_join(timestamps_cloud, timestamps_rec, join_by(recording_id)) %>%
select(id.x, participant.x, recording.begin.y, pprep.start.x, pprep.end.x, pspeech.start.x, pspeech.end.x, cprep.start.x, cprep.end.x, cspeech.start.x, cspeech.end.x, recording.end.y) %>%
rename(record_id = id.x, parent_child = participant.x, recording_begin = recording.begin.y, pprep_start = pprep.start.x, pprep_end = pprep.end.x, pspeech_start = pspeech.start.x, pspeech_end = pspeech.end.x, cprep_start = cprep.start.x, cprep_end = cprep.end.x, cspeech_start = cspeech.start.x, cspeech_end = cspeech.end.x, recording_end = recording.end.y) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_", as.character(parent_child)), .before = recording_begin)
# calculate prep and speech durations in nanoseconds, convert to minutes
tsst_durations <- mutate(timestamp_data, pprep_duration_ns = pprep_end - pprep_start,
pprep_duration = (pprep_duration_ns * 10^-9)/60,
pspeech_duration_ns = pspeech_end - pspeech_start,
pspeech_duration = (pspeech_duration_ns * 10^-9)/60,
cprep_duration_ns = cprep_end - cprep_start,
cprep_duration = (cprep_duration_ns * 10^-9)/60,
cspeech_duration_ns = cspeech_end - cspeech_start,
cspeech_duration = (cspeech_duration_ns * 10^-9)/60,) %>%
select(record_id_chr, pprep_duration, pspeech_duration, cprep_duration, cspeech_duration)
View(tsst_durations)
# combine blink_data and timestamp_data
blink_rates <- full_join(blink_data, tsst_durations, join_by(record_id_chr)) %>%
# calculate blink rates
mutate(pprep_blinkrate = p_prep/pprep_duration,
pspeech_blinkrate = p_speech/pspeech_duration,
cprep_blinkrate = c_prep/cprep_duration,
cspeech_blinkrate = c_speech/cspeech_duration)
View(blink_rates)
# select and rename variables for blink data
blink_data <- mutate(blink_data, record_id_chr = paste0(as.character(id), "_", as.character(participant)), .before = c_prep) %>%
rename(pprep_blinks = p_prep, pspeech_blinks = p_speech, cprep_blinks = c_prep, cspeech_blinks = c_speech)
# upload dataset files and clean up headers
demo_data <- read_csv("data/raw/demo.csv") %>%
janitor::clean_names()
ep_data <- read_csv("data/raw/ep_questionnaires.csv") %>%
janitor::clean_names()
hbq_data <- read_csv("data/raw/hbq_scores_overall.csv") %>%
janitor::clean_names()
timestamps <- read_csv("data/raw/merged_events_data.csv") %>%
janitor::clean_names()
blink_data <- read_csv("data/raw/blink_data_tsst.csv") %>%
janitor::clean_names()
# select and rename variables for blink data
blink_data <- mutate(blink_data, record_id_chr = paste0(as.character(id), "_", as.character(participant)), .before = c_prep) %>%
rename(pprep_blinks = p_prep, pspeech_blinks = p_speech, cprep_blinks = c_prep, cspeech_blinks = c_speech)
# combine blink_data and timestamp_data
blink_rates <- full_join(blink_data, tsst_durations, join_by(record_id_chr)) %>%
# calculate blink rates
mutate(pprep_blinkrate = pprep_blinks/pprep_duration,
pspeech_blinkrate = pspeech_blinks/pspeech_duration,
cprep_blinkrate = cprep_blinks/cprep_duration,
cspeech_blinkrate = cspeech_blinks/cspeech_duration)
View(blink_rates)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tibble)
base_folder <- "../data/raw/timestamps"
subfolders <- list.dirs(path = base_folder, full.names = TRUE, recursive = FALSE)
subfolders <- list.dirs(path = base_folder, full.names = TRUE, recursive = FALSE)
# Initialize an empty dataframe to hold the merged data
merged_data <- tibble()
# Loop through each subfolder to process the files
for (subfolder in subfolders) {
# Extract the parts i care from their name such as id and p or c
folder_name_parts <- unlist(strsplit(basename(subfolder), split = "-"))
id <- folder_name_parts[1]
participant <- folder_name_parts[2]
# Construct the file path for blinks.csv within the current subfolder
file_path <- file.path(subfolder, "blinks.csv")
# Check if the file exists before attempting to read
if (file.exists(file_path)) {
# Read the blinks.csv file
data <- read_csv(file_path)
# Add the extracted folder name parts as new columns
data$id <- id
data$participant <- sub("\\_.*", "", participant) # Remove everything after the underscore
# Merge this file's data into the main dataframe
merged_data <- bind_rows(merged_data, data)
}
}
write_csv(merged_data,"../data/raw/merged_blinks_data.csv")
# Initialize an empty dataframe to hold the merged data
merged_events_data <- tibble()
# Loop through each subfolder to process the files
for (subfolder in subfolders) {
# Extract the parts i care from their name such as id and p or c
folder_name_parts <- unlist(strsplit(basename(subfolder), split = "-"))
id <- folder_name_parts[1]
participant <- folder_name_parts[2]
# Construct the file path for blinks.csv within the current subfolder
file_path <- file.path(subfolder, "events.csv")
# Check if the file exists before attempting to read
if (file.exists(file_path)) {
# Read the blinks.csv file
data <- read_csv(file_path)
# Add the extracted folder name parts as new columns
data$id <- id
data$participant <- sub("\\_.*", "", participant) # Remove everything after the underscore
# Merge this file's data into the main dataframe
merged_events_data <- bind_rows(merged_events_data, data)
}
}
write_csv(merged_events_data,"../data/raw/merged_events_data.csv")
pivoted_merged_events_data <- merged_events_data %>%
select(-c(type)) %>%
pivot_wider(names_from = name, values_from = `timestamp [ns]`)
write_csv(pivoted_merged_events_data,"../data/raw/pivoted_merged_events_data.csv")
blink_data_tsst <- merged_data %>%
left_join(pivoted_merged_events_data, join_by(`recording id`, id, participant)) %>%
mutate(blink_identity = case_when(
`start timestamp [ns]` >= pprep.start & `start timestamp [ns]` <= pprep.end ~ "pprep_blinks",
`start timestamp [ns]` >= cprep.start & `start timestamp [ns]` <= cprep.end ~ "cprep_blinks",
`start timestamp [ns]` >= pspeech.start & `start timestamp [ns]` <= pspeech.end ~ "pspeech_blinks",
`start timestamp [ns]` >= cspeech.start & `start timestamp [ns]` <= cspeech.end ~ "cspeech_blinks",
TRUE ~ NA_character_
)) %>%
filter(!is.na(blink_identity)) %>%
group_by(id,participant,blink_identity) %>%
count() %>%
pivot_wider(names_from =  blink_identity, values_from = n)
write_csv(blink_data_tsst,"../data/raw/blink_data_tsst.csv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(tidyverse)
library(readxl)
# APA formatting
theme_apa <- papaja::theme_apa
# variable for current date
datetoday <- Sys.Date()
# variable for data folder
existing_folder <- "data"
# create folder inside data folder named with current date
new_folder <- file.path(existing_folder, datetoday)
dir.create(new_folder)
# upload dataset files and clean up headers
demo_data <- read_csv("data/raw/demo.csv") %>%
janitor::clean_names()
ep_data <- read_csv("data/raw/ep_questionnaires.csv") %>%
janitor::clean_names()
hbq_data <- read_csv("data/raw/hbq_scores_overall.csv") %>%
janitor::clean_names()
timestamps <- read_csv("data/raw/merged_events_data.csv") %>%
janitor::clean_names()
blink_data <- read_csv("data/raw/blink_data_tsst.csv") %>%
janitor::clean_names()
# add if needed
# select and rename variables for child demo data
demo_child_data <- demo_data %>%
select(record_id, c_age_m, c_age_y, c_sex, c_race, c_latinx, p_edu, income_house, ladder_country, ladder_community) %>%
rename(age_m = c_age_m, age_y = c_age_y, sex = c_sex, race = c_race, latinx = c_latinx, parent_edu = p_edu, ses_country = ladder_country, ses_community = ladder_community) %>%
mutate(parent_child = 1, .before = age_m) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_c"), .before = parent_child)
# select and rename variables for parent demo data
demo_parent_data <- demo_data %>%
select(record_id, p_age_m, p_age_y, p_sex, p_race, p_latinx, p_edu, income_house, ladder_country, ladder_community) %>%
rename(age_m = p_age_m, age_y = p_age_y, sex = p_sex, race = p_race, latinx = p_latinx, parent_edu = p_edu, ses_country = ladder_country, ses_community = ladder_community) %>%
mutate(parent_child = 0, .before = age_m) %>%
mutate(record_id_chr = paste0(as.character(record_id),"_p"), .before = parent_child)
# select and rename variables for child ep questionnaire data
ep_child_data <- ep_data %>%
select(record_id, preeptrier_1, preeptrier_2, preeptrier_3, preeptrier_4, posttrierc1, posttrierc2, posttrierc3, posttrier4) %>%
rename(pre_anxiety = preeptrier_1, pre_joy = preeptrier_2, pre_success = preeptrier_3, pre_meta = preeptrier_4, post_anxiety = posttrierc1, post_joy = posttrierc2, post_success = posttrierc3, post_meta = posttrier4) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_c"), .before = pre_anxiety)
# select and rename variables for parent ep questionnaire data
ep_parent_data <- ep_data %>%
select(record_id, preeptrier_1, preeptrier_2, preeptrier_3, preeptrier_4, posttrier1, posttrier2, posttrier3, posttrier4) %>%
rename(pre_anxiety = preeptrier_1, pre_joy = preeptrier_2, pre_success = preeptrier_3, pre_meta = preeptrier_4, post_anxiety = posttrier1, post_joy = posttrier2, post_success = posttrier3, post_meta = posttrier4) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_p"), .before = pre_anxiety)
# select and rename variables for child hbq data
# calculate overall anxiety score
hbq_child_data <- hbq_data %>%
select(record_id, hbq_internalizing_symptoms_overanxious, hbq_internalizing_symptoms_separation_anxiety, hbq_social_withdrawal_social_inhibition) %>%
rename(overanxious = hbq_internalizing_symptoms_overanxious, separation_anxiety = hbq_internalizing_symptoms_separation_anxiety, social_inhibition = hbq_social_withdrawal_social_inhibition) %>%
mutate(hbq_anxiety = overanxious + separation_anxiety + social_inhibition) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_c"), .before = overanxious) %>%
filter(!is.na(overanxious) | !is.na(separation_anxiety) | !is.na(social_inhibition))
# select and rename variables for parent hbq data
# calculate overall anxiety score
hbq_parent_data <- hbq_data %>%
select(record_id, hbq_internalizing_symptoms_overanxious, hbq_internalizing_symptoms_separation_anxiety, hbq_social_withdrawal_social_inhibition) %>%
rename(overanxious = hbq_internalizing_symptoms_overanxious, separation_anxiety = hbq_internalizing_symptoms_separation_anxiety, social_inhibition = hbq_social_withdrawal_social_inhibition) %>%
mutate(hbq_anxiety = overanxious + separation_anxiety + social_inhibition) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_p"), .before = overanxious) %>%
filter(!is.na(overanxious) | !is.na(separation_anxiety) | !is.na(social_inhibition))
# select and rename variables for blink data
blink_data <- mutate(blink_data, record_id_chr = paste0(as.character(id), "_", as.character(participant)), .before = c_prep)
View(blink_data)
# select and rename variables for blink data
blink_data <- mutate(blink_data, record_id_chr = paste0(as.character(id), "_", as.character(participant)), .before = cprep_blinks)
View(timestamps)
# create tables for cloud and recording timestamps
# pivot to create columns for each type of timestamp
timestamps_cloud <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "cloud")
timestamps_rec <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "recording")
# combine cloud and recording timestamps, clean up variable names
timestamp_data <- full_join(timestamps_cloud, timestamps_rec, join_by(recording_id)) %>%
select(id.x, participant.x, recording.begin.y, pprep.start.x, pprep.end.x, pspeech.start.x, pspeech.end.x, cprep.start.x, cprep.end.x, cspeech.start.x, cspeech.end.x, recording.end.y) %>%
rename(record_id = id.x, parent_child = participant.x, recording_begin = recording.begin.y, pprep_start = pprep.start.x, pprep_end = pprep.end.x, pspeech_start = pspeech.start.x, pspeech_end = pspeech.end.x, cprep_start = cprep.start.x, cprep_end = cprep.end.x, cspeech_start = cspeech.start.x, cspeech_end = cspeech.end.x, recording_end = recording.end.y) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_", as.character(parent_child)), .before = recording_begin)
View(timestamps)
View(timestamp_data)
# calculate prep and speech durations in nanoseconds, convert to minutes
tsst_durations <- mutate(timestamp_data, pprep_duration_ns = pprep_end - pprep_start,
pprep_duration = (pprep_duration_ns * 10^-9)/60,
pspeech_duration_ns = pspeech_end - pspeech_start,
pspeech_duration = (pspeech_duration_ns * 10^-9)/60,
cprep_duration_ns = cprep_end - cprep_start,
cprep_duration = (cprep_duration_ns * 10^-9)/60,
cspeech_duration_ns = cspeech_end - cspeech_start,
cspeech_duration = (cspeech_duration_ns * 10^-9)/60,) %>%
select(record_id_chr, pprep_duration, pspeech_duration, cprep_duration, cspeech_duration)
View(tsst_durations)
# combine blink_data and timestamp_data
blink_rates <- full_join(blink_data, tsst_durations, join_by(record_id_chr)) %>%
# calculate blink rates
mutate(pprep_blinkrate = pprep_blinks/pprep_duration,
pspeech_blinkrate = pspeech_blinks/pspeech_duration,
cprep_blinkrate = cprep_blinks/cprep_duration,
cspeech_blinkrate = cspeech_blinks/cspeech_duration)
View(blink_rates)
# stack demo_child_data and demo_parent_data
demo_clean <- bind_rows(demo_child_data, demo_parent_data)
# stack ep_child_data and ep_parent_data
ep_clean <- bind_rows(ep_child_data, ep_parent_data)
# stack hbq_child_data and hbq_parent_data
hbq_clean <- bind_rows(hbq_child_data, hbq_parent_data)
View(blink_rates)
View(ep_clean)
View(blink_rates)
# full join demo_clean and ep_clean to make demo_ep as a stepping stone
demo_ep <- full_join(demo_clean, ep_clean, join_by(record_id, record_id_chr))
# full join demo_ep and hbq_clean to make demo_up_hbq as a stepping stone
demo_ep_hbq <- full_join(demo_ep, hbq_clean, join_by(record_id, record_id_chr))
# full join demo_ep_hbq and blink_rates to make complete data table
data_complete <- full_join(demo_ep_hbq, blink_rates, join_by(record_id = id, record_id_chr))
demo_ep <- full_join(demo_clean, ep_clean, join_by(record_id, record_id_chr))
# full join demo_ep and hbq_clean to make demo_up_hbq as a stepping stone
demo_ep_hbq <- full_join(demo_ep, hbq_clean, join_by(record_id, record_id_chr))
# full join demo_ep_hbq and blink_rates to make complete data table
data_complete <- full_join(demo_ep_hbq, blink_rates, join_by(record_id == id, record_id_chr))
View(data_complete)
# full join demo_clean and ep_clean to make demo_ep as a stepping stone
demo_ep <- full_join(demo_clean, ep_clean, join_by(record_id, record_id_chr))
# full join demo_ep and hbq_clean to make demo_up_hbq as a stepping stone
demo_ep_hbq <- full_join(demo_ep, hbq_clean, join_by(record_id, record_id_chr))
# full join demo_ep_hbq and blink_rates to make complete data table
data_complete <- full_join(demo_ep_hbq, blink_rates, join_by(record_id == id, record_id_chr))
# write data_complete to .csv
write.csv(data_complete, file = paste0(new_folder, "/data_complete.csv"), row.names = FALSE)
