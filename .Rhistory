janitor::clean_names()
blinks_pupil <- read_csv("raw/blinks from pupil cloud/1182-c_tsst-15431bcf/d.csv") %>%
janitor::clean_names()
View(blinks_manual)
blinks_timestamps <- read_csv("raw/blinks from pupil cloud/1182-c_tsst-15431bcf/events.csv") %>%
janitor::clean_names()
View(blinks_timestamps)
View(tsst_durations)
knitr::opts_chunk$set(echo = TRUE)
blink_counts <- inner_join(blink_data, timestamp_data, join_by(record_id_chr)) %>%
# create column for blink categorization
mutate(blink_type = case_when(
start_timestamp_ns >= pprep_start & end_timestamp_ns <= pprep_end ~ "pprep_blinks",
start_timestamp_ns >= pspeech_start & end_timestamp_ns <= pspeech_end ~ "pspeech_blinks",
start_timestamp_ns >= cprep_start & end_timestamp_ns <= cprep_end ~ "cprep_blinks",
start_timestamp_ns >= cspeech_start & end_timestamp_ns <= cspeech_end ~ "cspeech_blinks",
.default = NA
)) %>%
# filter out blinks outside of task sections
filter(!is.na(blink_type)) %>%
# group by pt and blink type
group_by(record_id_chr, blink_type) %>%
# count number of blinks per task section per pt
summarise(n = n()) %>%
# pivot wider, one row per pt
pivot_wider(names_from = blink_type, values_from = n)
View(blink_data)
View(timestamp_data)
tsst_durations <- mutate(timestamp_data, pprep_duration_ns = pprep_end - pprep_start,
pprep_duration = (pprep_duration_ns * 10^-9)/60,
pspeech_duration_ns = pspeech_end - pspeech_start,
pspeech_duration = (pspeech_duration_ns * 10^-9)/60,
cprep_duration_ns = cprep_end - cprep_start,
cprep_duration = (cprep_duration_ns * 10^-9)/60,
cspeech_duration_ns = cspeech_end - cspeech_start,
cspeech_duration = (cspeech_duration_ns * 10^-9)/60,) %>%
select(record_id_chr, pprep_duration, pspeech_duration, cprep_duration, cspeech_duration)
blink_counts <- inner_join(blink_data, timestamp_data, join_by(record_id_chr)) %>%
# create column for blink categorization
mutate(blink_type = case_when(
start_timestamp_ns >= pprep_start & end_timestamp_ns <= pprep_end ~ "pprep_blinks",
start_timestamp_ns >= pspeech_start & end_timestamp_ns <= pspeech_end ~ "pspeech_blinks",
start_timestamp_ns >= cprep_start & end_timestamp_ns <= cprep_end ~ "cprep_blinks",
start_timestamp_ns >= cspeech_start & end_timestamp_ns <= cspeech_end ~ "cspeech_blinks",
.default = NA
)) %>%
# filter out blinks outside of task sections
filter(!is.na(blink_type)) %>%
# group by pt and blink type
group_by(record_id_chr, blink_type) %>%
# count number of blinks per task section per pt
summarise(n = n()) %>%
# pivot wider, one row per pt
pivot_wider(names_from = blink_type, values_from = n)
View(tsst_durations)
View(blink_data)
library(tidyverse)
# pull manual and pupil blink files
blinks_pupil <- read_csv("raw/blinks from pupil cloud/1182-c_tsst-15431bcf/d.csv") %>%
janitor::clean_names()
blinks_manual <- read_csv("1182_P_TQH.csv") %>%
janitor::clean_names()
blinks_timestamps <- read_csv("raw/blinks from pupil cloud/1182-c_tsst-15431bcf/events.csv") %>%
janitor::clean_names()
View(blinks_timestamps)
View(blinks_manual)
View(blinks_pupil)
# pull manual and pupil blink files, clean up names and organize columns
blinks_pupil <- read_csv("raw/blinks from pupil cloud/1182-c_tsst-15431bcf/d.csv") %>%
janitor::clean_names() %>%
select(blink_id, start_timestamp_ns, end_timestamp_ns, duration_ms)
blinks_manual <- read_csv("1182_P_TQH.csv") %>%
janitor::clean_names() %>%
filter(is.na(not_visible)) %>%
select(begin_time_ss_msec, end_time_ss_msec, duration_ss_msec, eye_blinks, timestamps)
blinks_timestamps <- read_csv("raw/blinks from pupil cloud/1182-c_tsst-15431bcf/events.csv") %>%
janitor::clean_names()
blinks_timestamps <- read_csv("raw/blinks from pupil cloud/1182-c_tsst-15431bcf/events.csv") %>%
janitor::clean_names() %>%
select(timestamp_ns, name)
blinks_pupil_ts <- cross_join(blinks_pupil, blinks_timestamps)
View(blinks_pupil_ts)
blinks_pupil_ts <- cross_join(blinks_pupil, blinks_timestamps) %>%
# pivot wider, one row per blink
pivot_wider(names_from = name, values_from = timestamp_ns)
blinks_pupil_ts <- cross_join(blinks_pupil, blinks_timestamps) %>%
# pivot wider, one row per blink
pivot_wider(names_from = name, values_from = timestamp_ns) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
start_timestamp_ns >= pprep.start & end_timestamp_ns <= pprep.end ~ "pprep",
start_timestamp_ns >= pspeech.start & end_timestamp_ns <= pspeech.end ~ "pspeech",
start_timestamp_ns >= cprep.start & end_timestamp_ns <= cprep.end ~ "cprep",
start_timestamp_ns >= cspeech.start & end_timestamp_ns <= cspeech.end ~ "cspeech",
.default = NA
))
blinks_pupil_ts <- cross_join(blinks_pupil, blinks_timestamps) %>%
# pivot wider, one row per blink
pivot_wider(names_from = name, values_from = timestamp_ns) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
start_timestamp_ns >= pprep.start & end_timestamp_ns <= pprep.end ~ "pprep",
start_timestamp_ns >= pspeech.start & end_timestamp_ns <= pspeech.end ~ "pspeech",
start_timestamp_ns >= cprep.start & end_timestamp_ns <= cprep.end ~ "cprep",
start_timestamp_ns >= cspeech.start & end_timestamp_ns <= cspeech.end ~ "cspeech",
.default = NA
)) %>%
# remove blinks outside of task sections
filter(!is.na(blink_type))
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(tidyverse)
library(readxl)
# APA formatting
theme_apa <- papaja::theme_apa
# variable for current date
datetoday <- Sys.Date()
# variable for data folder
existing_folder <- "data"
# create folder inside data folder named with current date
new_folder <- file.path(existing_folder, datetoday)
dir.create(new_folder)
# upload dataset files and clean up headers
demo_data <- read_csv("data/raw/demo.csv") %>%
janitor::clean_names()
ep_data <- read_csv("data/raw/ep_questionnaires.csv") %>%
janitor::clean_names()
hbq_data <- read_csv("data/raw/hbq_scores_overall.csv") %>%
janitor::clean_names()
timestamps <- read_csv("data/raw/merged_events_data.csv") %>%
janitor::clean_names()
blink_data <- read_csv("data/raw/merged_blinks_data_2024-05-02.csv") %>%
janitor::clean_names()
# select and rename variables for child demo data
demo_child_data <- demo_data %>%
select(record_id, c_age_m, c_age_y, c_sex, c_race, c_latinx, p_edu, income_house, ladder_country, ladder_community) %>%
rename(age_m = c_age_m, age_y = c_age_y, sex = c_sex, race = c_race, latinx = c_latinx, parent_edu = p_edu, ses_country = ladder_country, ses_community = ladder_community) %>%
mutate(parent_child = 1, .before = age_m) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_C"), .before = parent_child)
# select and rename variables for parent demo data
demo_parent_data <- demo_data %>%
select(record_id, p_age_m, p_age_y, p_sex, p_race, p_latinx, p_edu, income_house, ladder_country, ladder_community) %>%
rename(age_m = p_age_m, age_y = p_age_y, sex = p_sex, race = p_race, latinx = p_latinx, parent_edu = p_edu, ses_country = ladder_country, ses_community = ladder_community) %>%
mutate(parent_child = 0, .before = age_m) %>%
mutate(record_id_chr = paste0(as.character(record_id),"_P"), .before = parent_child)
# select and rename variables for child ep questionnaire data
ep_child_data <- ep_data %>%
select(record_id, preeptrier_1, preeptrier_2, preeptrier_3, preeptrier_4, posttrierc1, posttrierc2, posttrierc3, posttrier4) %>%
rename(pre_anxiety = preeptrier_1, pre_joy = preeptrier_2, pre_success = preeptrier_3, pre_meta = preeptrier_4, post_anxiety = posttrierc1, post_joy = posttrierc2, post_success = posttrierc3, post_meta = posttrier4) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_C"), .before = pre_anxiety)
# select and rename variables for parent ep questionnaire data
ep_parent_data <- ep_data %>%
select(record_id, preeptrier_1, preeptrier_2, preeptrier_3, preeptrier_4, posttrier1, posttrier2, posttrier3, posttrier4) %>%
rename(pre_anxiety = preeptrier_1, pre_joy = preeptrier_2, pre_success = preeptrier_3, pre_meta = preeptrier_4, post_anxiety = posttrier1, post_joy = posttrier2, post_success = posttrier3, post_meta = posttrier4) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_P"), .before = pre_anxiety)
# select and rename variables for child hbq data
# calculate overall anxiety score
hbq_child_data <- hbq_data %>%
select(record_id, hbq_internalizing_symptoms_overanxious, hbq_internalizing_symptoms_separation_anxiety, hbq_social_withdrawal_social_inhibition) %>%
rename(overanxious = hbq_internalizing_symptoms_overanxious, separation_anxiety = hbq_internalizing_symptoms_separation_anxiety, social_inhibition = hbq_social_withdrawal_social_inhibition) %>%
mutate(hbq_anxiety = overanxious + separation_anxiety + social_inhibition) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_C"), .before = overanxious) %>%
filter(!is.na(overanxious) | !is.na(separation_anxiety) | !is.na(social_inhibition))
# select and rename variables for parent hbq data
# calculate overall anxiety score
hbq_parent_data <- hbq_data %>%
select(record_id, hbq_internalizing_symptoms_overanxious, hbq_internalizing_symptoms_separation_anxiety, hbq_social_withdrawal_social_inhibition) %>%
rename(overanxious = hbq_internalizing_symptoms_overanxious, separation_anxiety = hbq_internalizing_symptoms_separation_anxiety, social_inhibition = hbq_social_withdrawal_social_inhibition) %>%
mutate(hbq_anxiety = overanxious + separation_anxiety + social_inhibition) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_P"), .before = overanxious) %>%
filter(!is.na(overanxious) | !is.na(separation_anxiety) | !is.na(social_inhibition))
# select and rename variables for blink data
blink_data <- mutate(blink_data, record_id_chr = paste0(as.character(id), "_", toupper(as.character(participant))))
# create tables for cloud and recording timestamps
# pivot to create columns for each type of timestamp
timestamps_cloud <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "cloud")
timestamps_rec <- pivot_wider(timestamps, names_from = name, values_from = timestamp_ns) %>%
filter(type == "recording")
# combine cloud and recording timestamps, clean up variable names
timestamp_data <- full_join(timestamps_cloud, timestamps_rec, join_by(recording_id)) %>%
select(id.x, participant.x, recording.begin.y, pprep.start.x, pprep.end.x, pspeech.start.x, pspeech.end.x, cprep.start.x, cprep.end.x, cspeech.start.x, cspeech.end.x, recording.end.y) %>%
rename(record_id = id.x, parent_child = participant.x, recording_begin = recording.begin.y, pprep_start = pprep.start.x, pprep_end = pprep.end.x, pspeech_start = pspeech.start.x, pspeech_end = pspeech.end.x, cprep_start = cprep.start.x, cprep_end = cprep.end.x, cspeech_start = cspeech.start.x, cspeech_end = cspeech.end.x, recording_end = recording.end.y) %>%
mutate(record_id_chr = paste0(as.character(record_id), "_", toupper(as.character(parent_child))), .before = recording_begin)
# calculate prep and speech durations in nanoseconds, convert to minutes
tsst_durations <- mutate(timestamp_data, pprep_duration_ns = pprep_end - pprep_start,
pprep_duration = (pprep_duration_ns * 10^-9)/60,
pspeech_duration_ns = pspeech_end - pspeech_start,
pspeech_duration = (pspeech_duration_ns * 10^-9)/60,
cprep_duration_ns = cprep_end - cprep_start,
cprep_duration = (cprep_duration_ns * 10^-9)/60,
cspeech_duration_ns = cspeech_end - cspeech_start,
cspeech_duration = (cspeech_duration_ns * 10^-9)/60,) %>%
select(record_id_chr, pprep_duration, pspeech_duration, cprep_duration, cspeech_duration)
# combine blink_data and timestamp_data so blinks can be categorized into different task sections
blink_counts <- inner_join(blink_data, timestamp_data, join_by(record_id_chr)) %>%
# create column for blink categorization
mutate(blink_type = case_when(
start_timestamp_ns >= pprep_start & end_timestamp_ns <= pprep_end ~ "pprep_blinks",
start_timestamp_ns >= pspeech_start & end_timestamp_ns <= pspeech_end ~ "pspeech_blinks",
start_timestamp_ns >= cprep_start & end_timestamp_ns <= cprep_end ~ "cprep_blinks",
start_timestamp_ns >= cspeech_start & end_timestamp_ns <= cspeech_end ~ "cspeech_blinks",
.default = NA
)) %>%
# filter out blinks outside of task sections
filter(!is.na(blink_type)) %>%
# group by pt and blink type
group_by(record_id_chr, blink_type) %>%
# count number of blinks per task section per pt
summarise(n = n()) %>%
# pivot wider, one row per pt
pivot_wider(names_from = blink_type, values_from = n)
# combine blink_counts and tsst_durations so blink rate can be calculated
blink_rates <- full_join(blink_counts, tsst_durations) %>%
# calculate blink rates
mutate(pprep_blinkrate = pprep_blinks/pprep_duration,
pspeech_blinkrate = pspeech_blinks/pspeech_duration,
cprep_blinkrate = cprep_blinks/cprep_duration,
cspeech_blinkrate = cspeech_blinks/cspeech_duration)
# stack demo_child_data and demo_parent_data
demo_clean <- bind_rows(demo_child_data, demo_parent_data)
# stack ep_child_data and ep_parent_data
ep_clean <- bind_rows(ep_child_data, ep_parent_data)
# stack hbq_child_data and hbq_parent_data
hbq_clean <- bind_rows(hbq_child_data, hbq_parent_data)
# inner join demo_clean and ep_clean
data_complete <- inner_join(demo_clean, ep_clean, join_by(record_id_chr, record_id)) %>%
# add hbq data
inner_join(hbq_clean, join_by(record_id_chr, record_id)) %>%
# add blink rates
inner_join(blink_rates, join_by(record_id_chr)) %>%
# filter out incomplete dyads
group_by(record_id) %>%
mutate(record_id_n = n()) %>%
filter(record_id_n == 2) %>%
ungroup()
# write data_complete to .csv
write.csv(data_complete, file = paste0(new_folder, "/data_complete.csv"), row.names = FALSE)
data_complete <- inner_join(demo_clean, ep_clean, join_by(record_id_chr, record_id)) %>%
# add hbq data
inner_join(hbq_clean, join_by(record_id_chr, record_id)) %>%
# add blink rates
inner_join(blink_rates, join_by(record_id_chr))
View(data_complete)
data_complete_demo <- group_by(data_complete, record_id) %>%
summarise(mean = mean(age_y), min = min(age_y), max = max(age_y))
View(data_complete_demo)
data_complete_demo <- group_by(data_complete, parent_child) %>%
summarise(mean = mean(age_y), min = min(age_y), max = max(age_y))
data_complete_demo <- group_by(data_complete, parent_child) %>%
summarise(mean = mean(age_y), min = min(age_y), max = max(age_y), sd = sd(age_y))
data_complete <- inner_join(demo_clean, ep_clean, join_by(record_id_chr, record_id)) %>%
# add hbq data
inner_join(hbq_clean, join_by(record_id_chr, record_id)) %>%
# add blink rates
inner_join(blink_rates, join_by(record_id_chr))
write.csv(data_complete, file = paste0(new_folder, "/data_complete.csv"), row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
blinks_manual <- read_csv("1182_C_TQH.csv") %>%
janitor::clean_names() %>%
filter(is.na(not_visible)) %>%
select(begin_time_ss_msec, end_time_ss_msec, duration_ss_msec, eye_blinks, timestamps)
blinks_pupil_ts <- cross_join(blinks_pupil, blinks_timestamps) %>%
# pivot wider, one row per blink
pivot_wider(names_from = name, values_from = timestamp_ns) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
start_timestamp_ns >= pprep.start & end_timestamp_ns <= pprep.end ~ "pprep",
start_timestamp_ns >= pspeech.start & end_timestamp_ns <= pspeech.end ~ "pspeech",
start_timestamp_ns >= cprep.start & end_timestamp_ns <= cprep.end ~ "cprep",
start_timestamp_ns >= cspeech.start & end_timestamp_ns <= cspeech.end ~ "cspeech",
.default = NA
)) %>%
# remove blinks outside of task sections
filter(!is.na(blink_type)) %>%
# keep relevant columns
select(1:4, 15)
blinks_pupil_ts <- cross_join(blinks_pupil, blinks_timestamps) %>%
# pivot wider, one row per blink
pivot_wider(names_from = name, values_from = timestamp_ns) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
start_timestamp_ns >= pprep.start & end_timestamp_ns <= pprep.end ~ "pprep",
start_timestamp_ns >= pspeech.start & end_timestamp_ns <= pspeech.end ~ "pspeech",
start_timestamp_ns >= cprep.start & end_timestamp_ns <= cprep.end ~ "cprep",
start_timestamp_ns >= cspeech.start & end_timestamp_ns <= cspeech.end ~ "cspeech",
.default = NA
)) %>%
# remove blinks outside of task sections
filter(!is.na(blink_type))
blinks_pupil_ts <- cross_join(blinks_pupil, blinks_timestamps) %>%
# pivot wider, one row per blink
pivot_wider(names_from = name, values_from = timestamp_ns) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
start_timestamp_ns >= pprep.start & end_timestamp_ns <= pprep.end ~ "pprep",
start_timestamp_ns >= pspeech.start & end_timestamp_ns <= pspeech.end ~ "pspeech",
start_timestamp_ns >= cprep.start & end_timestamp_ns <= cprep.end ~ "cprep",
start_timestamp_ns >= cspeech.start & end_timestamp_ns <= cspeech.end ~ "cspeech",
.default = NA
)) %>%
# remove blinks outside of task sections
filter(!is.na(blink_type)) %>%
# convert UTC to relative timestamp in s
mutate(start_timestamp_S = (start_timestamp_ns - recording.begin)/(10^9), end_timestamp_s = (end_timestamp_ns - recording.begin)/(10^9))
blinks_pupil_ts <- cross_join(blinks_pupil, blinks_timestamps) %>%
# pivot wider, one row per blink
pivot_wider(names_from = name, values_from = timestamp_ns) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
start_timestamp_ns >= pprep.start & end_timestamp_ns <= pprep.end ~ "pprep",
start_timestamp_ns >= pspeech.start & end_timestamp_ns <= pspeech.end ~ "pspeech",
start_timestamp_ns >= cprep.start & end_timestamp_ns <= cprep.end ~ "cprep",
start_timestamp_ns >= cspeech.start & end_timestamp_ns <= cspeech.end ~ "cspeech",
.default = NA
)) %>%
# remove blinks outside of task sections
filter(!is.na(blink_type)) %>%
# convert UTC to relative timestamp in s
mutate(start_timestamp_s = (start_timestamp_ns - recording.begin)/(10^9), end_timestamp_s = (end_timestamp_ns - recording.begin)/(10^9)) %>%
# select relevant columns
select(blink_id, start_timestamp_s, end_timestamp_s, duration_ms, blink_type)
View(blinks_timestamps)
# separate blinks and timestamps
blinks_manual_b <- filter(blinks_manual, is.na(timestamps))
blinks_manual_t <- filter(blinks_manual, is.na(eye_blinks))
View(blinks_manual_b)
View(blinks_manual_t)
blinks_timestamps <- mutate(blinks_timestamps, timestamp_s = timestamp_ns/(10^9))
blinks_timestamps_s <- mutate(blinks_timestamps, timestamp_s = timestamp_ns/(10^9)) %>%
select(timestamp_s, name)
View(blinks_timestamps_s)
blinks_manual_ts <- filter(blinks_manual, is.na(timestamps)) %>%
# add pupil timestamps
cross_join(blinks_timestamps_s)
View(blinks_manual_ts)
blinks_manual_ts <- filter(blinks_manual, is.na(timestamps)) %>%
# add pupil timestamps
cross_join(blinks_timestamps_s) %>%
# pivot wider, one row per blink
pivot_wider(names_from = name, values_from = timestamp_s) %>%
# convert UTC to relative timestamp
mutate(timestamp_s = timestamp_s - recording.begin)
blinks_manual_ts <- filter(blinks_manual, is.na(timestamps)) %>%
# add pupil timestamps
cross_join(blinks_timestamps_s) %>%
# pivot wider, one row per blink
pivot_wider(names_from = name, values_from = timestamp_s)
blinks_manual_ts <- filter(blinks_manual, is.na(timestamps)) %>%
# add pupil timestamps
cross_join(blinks_timestamps_s) %>%
# pivot wider, one row per blink
pivot_wider(names_from = name, values_from = timestamp_s) %>%
# convert UTC to relative timestamp
mutate(pprep.start = pprep.start - recording.begin, pprep.end = pprep.end - recording.begin, pspeech.start = pspeech.start - recording.begin, pspeech.end = pspeech.end - recording.begin, cprep.start = cprep.start - recording.begin, cprep.end = cprep.end - recording.begin, cspeech.start = cspeech.start - recording.begin, cspeech.end = cspeech.end - recording.begin)
blinks_manual_ts <- filter(blinks_manual, is.na(timestamps)) %>%
# add pupil timestamps
cross_join(blinks_timestamps_s) %>%
# pivot wider, one row per blink
pivot_wider(names_from = name, values_from = timestamp_s) %>%
# convert UTC to relative timestamp
mutate(pprep.start = pprep.start - recording.begin, pprep.end = pprep.end - recording.begin, pspeech.start = pspeech.start - recording.begin, pspeech.end = pspeech.end - recording.begin, cprep.start = cprep.start - recording.begin, cprep.end = cprep.end - recording.begin, cspeech.start = cspeech.start - recording.begin, cspeech.end = cspeech.end - recording.begin) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
begin_time_ss_msec >= pprep.start & end_time_ss_msec <= pprep.end ~ "pprep",
begin_time_ss_msec >= pspeech.start & end_time_ss_msec <= pspeech.end ~ "pspeech",
begin_time_ss_msec >= cprep.start & end_time_ss_msec <= cprep.end ~ "cprep",
begin_time_ss_msec >= cspeech.start & end_time_ss_msec <= cspeech.end ~ "cspeech",
.default = NA
))
blinks_manual_ts <- filter(blinks_manual, is.na(timestamps)) %>%
# add pupil timestamps
cross_join(blinks_timestamps_s) %>%
# pivot wider, one row per blink
pivot_wider(names_from = name, values_from = timestamp_s) %>%
# convert UTC to relative timestamp
mutate(pprep.start = pprep.start - recording.begin, pprep.end = pprep.end - recording.begin, pspeech.start = pspeech.start - recording.begin, pspeech.end = pspeech.end - recording.begin, cprep.start = cprep.start - recording.begin, cprep.end = cprep.end - recording.begin, cspeech.start = cspeech.start - recording.begin, cspeech.end = cspeech.end - recording.begin) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
begin_time_ss_msec >= pprep.start & end_time_ss_msec <= pprep.end ~ "pprep",
begin_time_ss_msec >= pspeech.start & end_time_ss_msec <= pspeech.end ~ "pspeech",
begin_time_ss_msec >= cprep.start & end_time_ss_msec <= cprep.end ~ "cprep",
begin_time_ss_msec >= cspeech.start & end_time_ss_msec <= cspeech.end ~ "cspeech",
.default = NA
)) %>%
# select relevant columns
select(eye_blinks, begin_time_ss_msec, end_time_ss_msec, duration_ss_msec, blink_type)
blinks_manual_ts <- filter(blinks_manual, is.na(timestamps)) %>%
# add pupil timestamps
cross_join(blinks_timestamps_s) %>%
# pivot wider, one row per blink
pivot_wider(names_from = name, values_from = timestamp_s) %>%
# convert UTC to relative timestamp
mutate(pprep.start = pprep.start - recording.begin, pprep.end = pprep.end - recording.begin, pspeech.start = pspeech.start - recording.begin, pspeech.end = pspeech.end - recording.begin, cprep.start = cprep.start - recording.begin, cprep.end = cprep.end - recording.begin, cspeech.start = cspeech.start - recording.begin, cspeech.end = cspeech.end - recording.begin) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
begin_time_ss_msec >= pprep.start & end_time_ss_msec <= pprep.end ~ "pprep",
begin_time_ss_msec >= pspeech.start & end_time_ss_msec <= pspeech.end ~ "pspeech",
begin_time_ss_msec >= cprep.start & end_time_ss_msec <= cprep.end ~ "cprep",
begin_time_ss_msec >= cspeech.start & end_time_ss_msec <= cspeech.end ~ "cspeech",
.default = NA
)) %>%
# calculate duration in ms
mutate(duration_ms = end_time_ss_msec - begin_time_ss_msec) %>%
# select relevant columns
select(eye_blinks, begin_time_ss_msec, end_time_ss_msec, duration_ms, blink_type)
blinks_manual_ts <- filter(blinks_manual, is.na(timestamps)) %>%
# add pupil timestamps
cross_join(blinks_timestamps_s) %>%
# pivot wider, one row per blink
pivot_wider(names_from = name, values_from = timestamp_s) %>%
# convert UTC to relative timestamp
mutate(pprep.start = pprep.start - recording.begin, pprep.end = pprep.end - recording.begin, pspeech.start = pspeech.start - recording.begin, pspeech.end = pspeech.end - recording.begin, cprep.start = cprep.start - recording.begin, cprep.end = cprep.end - recording.begin, cspeech.start = cspeech.start - recording.begin, cspeech.end = cspeech.end - recording.begin) %>%
# categorize blinks into different task sections
mutate(blink_type = case_when(
begin_time_ss_msec >= pprep.start & end_time_ss_msec <= pprep.end ~ "pprep",
begin_time_ss_msec >= pspeech.start & end_time_ss_msec <= pspeech.end ~ "pspeech",
begin_time_ss_msec >= cprep.start & end_time_ss_msec <= cprep.end ~ "cprep",
begin_time_ss_msec >= cspeech.start & end_time_ss_msec <= cspeech.end ~ "cspeech",
.default = NA
)) %>%
# calculate duration in ms
mutate(duration_ms = duration_ss_msec*1000) %>%
# select relevant columns
select(eye_blinks, begin_time_ss_msec, end_time_ss_msec, duration_ms, blink_type)
View(blinks_pupil_ts)
blinks_all <- cross_join(blinks_manual_ts, blinks_pupil_ts)
View(blinks_all)
blinks_all <- cross_join(blinks_manual_ts, blinks_pupil_ts) %>%
# calculate interval between each combination of timestamps (yikes again)
mutate(ts_interval = begin_time_ss_msec - start_timestamp_s) %>%
# identify the minimum interval for each manual blink identified
group_by(begin_time_ss_msec) %>%
summarize(min_interval = min(ts_interval))
blinks_all <- cross_join(blinks_manual_ts, blinks_pupil_ts) %>%
# calculate interval between each combination of timestamps (yikes again)
mutate(ts_interval = abs(begin_time_ss_msec - start_timestamp_s)) %>%
# identify the minimum interval for each manual blink identified
group_by(begin_time_ss_msec) %>%
summarize(min_interval = min(ts_interval))
blinks_all <- cross_join(blinks_manual_ts, blinks_pupil_ts) %>%
# calculate interval between each combination of timestamps (yikes again)
mutate(ts_interval = abs(begin_time_ss_msec - start_timestamp_s))
filter(ts_interval = min(ts_interval, na.rm = TRUE))
blinks_all <- cross_join(blinks_manual_ts, blinks_pupil_ts) %>%
# calculate interval between each combination of timestamps (yikes again)
mutate(ts_interval = abs(begin_time_ss_msec - start_timestamp_s)) %>%
# group by manual blink start timestamp for filtering
group_by(begin_time_ss_msec) %>%
# filter to include minimum interval for each manual blink
filter(ts_interval = min(ts_interval, na.rm = TRUE))
blinks_all <- cross_join(blinks_manual_ts, blinks_pupil_ts) %>%
# calculate interval between each combination of timestamps (yikes again)
mutate(ts_interval = abs(begin_time_ss_msec - start_timestamp_s)) %>%
# group by manual blink start timestamp for filtering
group_by(begin_time_ss_msec) %>%
# filter to include minimum interval for each manual blink
filter(ts_interval == min(ts_interval, na.rm = TRUE))
blinks_all <- cross_join(blinks_pupil_ts, blinks_manual_ts) %>%
# calculate interval between each combination of timestamps (yikes again)
mutate(ts_interval = abs(start_timestamp_s - begin_time_ss_msec)) %>%
# group by manual blink start timestamp for filtering
group_by(start_timestamp_s) %>%
# filter to include minimum interval for each manual blink
filter(ts_interval == min(ts_interval, na.rm = TRUE))
blinks_all <- cross_join(blinks_pupil_ts, blinks_manual_ts) %>%
# calculate interval between each combination of timestamps (yikes again)
mutate(ts_interval = abs(start_timestamp_s - begin_time_ss_msec)) %>%
# group by manual blink start timestamp for filtering
group_by(start_timestamp_s) %>%
# filter to include minimum interval for each manual blink
filter(ts_interval == min(ts_interval, na.rm = TRUE)) %>%
# filter top 36 blink intervals (unmatched pupil blinks)
attange(desc(ts_interval)) %>%
slice(1:36)
blinks_all <- cross_join(blinks_pupil_ts, blinks_manual_ts) %>%
# calculate interval between each combination of timestamps (yikes again)
mutate(ts_interval = abs(start_timestamp_s - begin_time_ss_msec)) %>%
# group by manual blink start timestamp for filtering
group_by(start_timestamp_s) %>%
# filter to include minimum interval for each manual blink
filter(ts_interval == min(ts_interval, na.rm = TRUE)) %>%
# filter top 36 blink intervals (unmatched pupil blinks)
arrange(desc(ts_interval)) %>%
slice(1:36)
blinks_all <- cross_join(blinks_pupil_ts, blinks_manual_ts) %>%
# calculate interval between each combination of timestamps (yikes again)
mutate(ts_interval = abs(start_timestamp_s - begin_time_ss_msec)) %>%
# group by manual blink start timestamp for filtering
group_by(start_timestamp_s) %>%
# filter to include minimum interval for each manual blink
filter(ts_interval == min(ts_interval, na.rm = TRUE)) %>%
# filter top 36 blink intervals (unmatched pupil blinks)
ungroup() %>%
arrange(desc(ts_interval)) %>%
slice(1:36)
blinks_all <- cross_join(blinks_pupil_ts, blinks_manual_ts) %>%
# calculate interval between each combination of timestamps (yikes again)
mutate(ts_interval = abs(start_timestamp_s - begin_time_ss_msec)) %>%
# group by manual blink start timestamp for filtering
group_by(start_timestamp_s) %>%
# filter to include minimum interval for each manual blink
filter(ts_interval == min(ts_interval, na.rm = TRUE)) %>%
# filter top 36 blink intervals (unmatched pupil blinks)
ungroup() %>%
arrange(desc(ts_interval)) %>%
slice(1:36) %>%
# select relevant columns
select(blink_id, start_timestamp_s, end_timestamp_s, duration_ms.x, blink_type.x)
write_csv(blinks_all)
write_csv(blinks_all, "blink_culprits.csv")
